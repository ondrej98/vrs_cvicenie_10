
vrs_cvicenie_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000218c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000689a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f4  00000000  00000000  000268ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  000280c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000688  00000000  00000000  00028818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016458  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d9c  00000000  00000000  0003f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000757bc  00000000  00000000  00045094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ba850  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ce0  00000000  00000000  000ba8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022fc 	.word	0x080022fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080022fc 	.word	0x080022fc

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <LL_AHB1_GRP1_EnableClock>:
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	4907      	ldr	r1, [pc, #28]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4313      	orrs	r3, r2
 800034e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000370:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000374:	f7ff ffe2 	bl	800033c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000378:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800037c:	f7ff ffde 	bl	800033c <LL_AHB1_GRP1_EnableClock>

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <__NVIC_SetPriorityGrouping>:
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b6:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	60d3      	str	r3, [r2, #12]
}
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_HSI_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	b2db      	uxtb	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	4904      	ldr	r1, [pc, #16]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000426:	4313      	orrs	r3, r2
 8000428:	600b      	str	r3, [r1, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f023 0203 	bic.w	r2, r3, #3
 800044c:	4904      	ldr	r1, [pc, #16]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	604b      	str	r3, [r1, #4]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <LL_RCC_GetSysClkSource+0x18>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f003 030c 	and.w	r3, r3, #12
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000490:	4904      	ldr	r1, [pc, #16]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004b8:	4904      	ldr	r1, [pc, #16]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	604b      	str	r3, [r1, #4]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_FLASH_SetLatency+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_FLASH_SetLatency+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40022000 	.word	0x40022000

08000580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_FLASH_GetLatency+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0307 	and.w	r3, r3, #7
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PWM_Value = 0;
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <main+0x3c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	PWM_ValueDirection = Direction_DownUp;
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <main+0x40>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff ffbb 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005b6:	f7ff ff9f 	bl	80004f8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f7ff fee2 	bl	8000384 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f80e 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff fed2 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c8:	f7ff fea0 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 fd8c 	bl	80010e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d0:	f000 fae6 	bl	8000ba0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005d4:	e7fe      	b.n	80005d4 <main+0x38>
 80005d6:	bf00      	nop
 80005d8:	20000021 	.word	0x20000021
 80005dc:	20000020 	.word	0x20000020

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ffb7 	bl	8000558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffc8 	bl	8000580 <LL_FLASH_GetLatency>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1fa      	bne.n	80005ec <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80005f6:	f7ff fee9 	bl	80003cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005fa:	bf00      	nop
 80005fc:	f7ff fef6 	bl	80003ec <LL_RCC_HSI_IsReady>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d1fa      	bne.n	80005fc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000606:	2010      	movs	r0, #16
 8000608:	f7ff ff02 	bl	8000410 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ff37 	bl	8000480 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff ff48 	bl	80004a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ff59 	bl	80004d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff0c 	bl	800043c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000624:	bf00      	nop
 8000626:	f7ff ff1d 	bl	8000464 <LL_RCC_GetSysClkSource>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1fa      	bne.n	8000626 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <SystemClock_Config+0x60>)
 8000632:	f001 fe19 	bl	8002268 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <SystemClock_Config+0x60>)
 8000638:	f001 fe24 	bl	8002284 <LL_SetSystemCoreClock>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	007a1200 	.word	0x007a1200

08000644 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f06f 0201 	mvn.w	r2, #1
 800066e:	611a      	str	r2, [r3, #16]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b01      	cmp	r3, #1
 800068e:	d101      	bne.n	8000694 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80006a6:	e7fe      	b.n	80006a6 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <HardFault_Handler+0x4>

080006ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <MemManage_Handler+0x4>

080006b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <BusFault_Handler+0x4>

080006ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <UsageFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 800070c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000710:	f7ff ffb4 	bl	800067c <LL_TIM_IsActiveFlag_UPDATE>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d047      	beq.n	80007aa <TIM2_IRQHandler+0xa2>
		LL_TIM_OC_SetCompareCH1(TIM2, PWM_Value);
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000724:	f7ff ff8e 	bl	8000644 <LL_TIM_OC_SetCompareCH1>
		if (PWM_Value < PWM_VALUE_MAX && PWM_ValueDirection == Direction_DownUp)
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b62      	cmp	r3, #98	; 0x62
 800072e:	d80a      	bhi.n	8000746 <TIM2_IRQHandler+0x3e>
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <TIM2_IRQHandler+0xb4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d106      	bne.n	8000746 <TIM2_IRQHandler+0x3e>
			PWM_Value += 1;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e031      	b.n	80007aa <TIM2_IRQHandler+0xa2>
		else if (PWM_Value >= PWM_VALUE_MAX
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b62      	cmp	r3, #98	; 0x62
 800074c:	d90d      	bls.n	800076a <TIM2_IRQHandler+0x62>
				&& PWM_ValueDirection == Direction_DownUp) {
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <TIM2_IRQHandler+0xb4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <TIM2_IRQHandler+0x62>
			PWM_ValueDirection = Direction_UpDown;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <TIM2_IRQHandler+0xb4>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
			PWM_Value -= 1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e01f      	b.n	80007aa <TIM2_IRQHandler+0xa2>
		} else if (PWM_Value > PWM_VALUE_MIN
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00a      	beq.n	8000788 <TIM2_IRQHandler+0x80>
				&& PWM_ValueDirection == Direction_UpDown)
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <TIM2_IRQHandler+0xb4>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d106      	bne.n	8000788 <TIM2_IRQHandler+0x80>
			PWM_Value -= 1;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e010      	b.n	80007aa <TIM2_IRQHandler+0xa2>
		else if (PWM_Value <= PWM_VALUE_MIN
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10c      	bne.n	80007aa <TIM2_IRQHandler+0xa2>
				&& PWM_ValueDirection == Direction_UpDown) {
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <TIM2_IRQHandler+0xb4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <TIM2_IRQHandler+0xa2>
			PWM_ValueDirection = Direction_DownUp;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <TIM2_IRQHandler+0xb4>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
			PWM_Value += 1;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <TIM2_IRQHandler+0xb0>)
 80007a8:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80007aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007ae:	f7ff ff57 	bl	8000660 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000021 	.word	0x20000021
 80007bc:	20000020 	.word	0x20000020

080007c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <LL_AHB1_GRP1_EnableClock>:
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40021000 	.word	0x40021000

08000938 <LL_APB1_GRP1_EnableClock>:
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800094e:	69da      	ldr	r2, [r3, #28]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000

08000968 <LL_TIM_EnableCounter>:
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f043 0201 	orr.w	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_TIM_DisableARRPreload>:
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_TIM_CC_EnableChannel>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a1a      	ldr	r2, [r3, #32]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	621a      	str	r2, [r3, #32]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <LL_TIM_OC_DisableFast>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d028      	beq.n	8000a2e <LL_TIM_OC_DisableFast+0x62>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d023      	beq.n	8000a2a <LL_TIM_OC_DisableFast+0x5e>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b10      	cmp	r3, #16
 80009e6:	d01e      	beq.n	8000a26 <LL_TIM_OC_DisableFast+0x5a>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2b40      	cmp	r3, #64	; 0x40
 80009ec:	d019      	beq.n	8000a22 <LL_TIM_OC_DisableFast+0x56>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f4:	d013      	beq.n	8000a1e <LL_TIM_OC_DisableFast+0x52>
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fc:	d00d      	beq.n	8000a1a <LL_TIM_OC_DisableFast+0x4e>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a04:	d007      	beq.n	8000a16 <LL_TIM_OC_DisableFast+0x4a>
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a0c:	d101      	bne.n	8000a12 <LL_TIM_OC_DisableFast+0x46>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e00e      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a12:	2308      	movs	r3, #8
 8000a14:	e00c      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a16:	2306      	movs	r3, #6
 8000a18:	e00a      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e008      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e006      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e004      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e002      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <LL_TIM_OC_DisableFast+0x64>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3318      	adds	r3, #24
 8000a36:	4619      	mov	r1, r3
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LL_TIM_OC_DisableFast+0x9c>)
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	440b      	add	r3, r1
 8000a40:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4908      	ldr	r1, [pc, #32]	; (8000a6c <LL_TIM_OC_DisableFast+0xa0>)
 8000a4a:	5ccb      	ldrb	r3, [r1, r3]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2304      	movs	r3, #4
 8000a50:	408b      	lsls	r3, r1
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	0800232c 	.word	0x0800232c
 8000a6c:	08002338 	.word	0x08002338

08000a70 <LL_TIM_OC_EnablePreload>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d028      	beq.n	8000ad2 <LL_TIM_OC_EnablePreload+0x62>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d023      	beq.n	8000ace <LL_TIM_OC_EnablePreload+0x5e>
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	2b10      	cmp	r3, #16
 8000a8a:	d01e      	beq.n	8000aca <LL_TIM_OC_EnablePreload+0x5a>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b40      	cmp	r3, #64	; 0x40
 8000a90:	d019      	beq.n	8000ac6 <LL_TIM_OC_EnablePreload+0x56>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a98:	d013      	beq.n	8000ac2 <LL_TIM_OC_EnablePreload+0x52>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa0:	d00d      	beq.n	8000abe <LL_TIM_OC_EnablePreload+0x4e>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa8:	d007      	beq.n	8000aba <LL_TIM_OC_EnablePreload+0x4a>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab0:	d101      	bne.n	8000ab6 <LL_TIM_OC_EnablePreload+0x46>
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	e00e      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	e00c      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000aba:	2306      	movs	r3, #6
 8000abc:	e00a      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e008      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	e006      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e004      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e002      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <LL_TIM_OC_EnablePreload+0x64>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3318      	adds	r3, #24
 8000ada:	4619      	mov	r1, r3
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LL_TIM_OC_EnablePreload+0x98>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	440b      	add	r3, r1
 8000ae4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <LL_TIM_OC_EnablePreload+0x9c>)
 8000aee:	5ccb      	ldrb	r3, [r1, r3]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2308      	movs	r3, #8
 8000af4:	408b      	lsls	r3, r1
 8000af6:	431a      	orrs	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	0800232c 	.word	0x0800232c
 8000b0c:	08002338 	.word	0x08002338

08000b10 <LL_TIM_SetClockSource>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000b22:	f023 0307 	bic.w	r3, r3, #7
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <LL_TIM_SetTriggerOutput>:
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	605a      	str	r2, [r3, #4]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_TIM_DisableMasterSlaveMode>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	609a      	str	r2, [r3, #8]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f043 0201 	orr.w	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	60da      	str	r2, [r3, #12]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ba6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2220      	movs	r2, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fb94 	bl	80022ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff feaf 	bl	8000938 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bda:	f7ff fe0b 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe5b 	bl	80008a0 <NVIC_EncodePriority>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4619      	mov	r1, r3
 8000bee:	201c      	movs	r0, #28
 8000bf0:	f7ff fe2c 	bl	800084c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f7ff fe0b 	bl	8000810 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000bfa:	f240 331f 	movw	r3, #799	; 0x31f
 8000bfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c00:	2300      	movs	r3, #0
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000c04:	2363      	movs	r3, #99	; 0x63
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c16:	f000 fec7 	bl	80019a8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000c1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c1e:	f7ff feb3 	bl	8000988 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c22:	2100      	movs	r1, #0
 8000c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c28:	f7ff ff72 	bl	8000b10 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c32:	f7ff ff1d 	bl	8000a70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000c36:	2360      	movs	r3, #96	; 0x60
 8000c38:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	461a      	mov	r2, r3
 8000c50:	2101      	movs	r1, #1
 8000c52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c56:	f000 ff19 	bl	8001a8c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c60:	f7ff feb4 	bl	80009cc <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2110      	movs	r1, #16
 8000c70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c74:	f000 ff0a 	bl	8001a8c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8000c78:	2110      	movs	r1, #16
 8000c7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c7e:	f7ff fea5 	bl	80009cc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c82:	2100      	movs	r1, #0
 8000c84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c88:	f7ff ff57 	bl	8000b3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c90:	f7ff ff66 	bl	8000b60 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  //LL_TIM_EnableIT_UPDATE(TIM2);
  //LL_TIM_OC_SetCompareCH1(TIM2, 50);
  LL_TIM_EnableCounter(TIM2);
 8000c94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c98:	f7ff fe66 	bl	8000968 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ca2:	f7ff fe81 	bl	80009a8 <LL_TIM_CC_EnableChannel>
  //LL_TIM_EnableIT_CC1(TIM2);
  LL_TIM_EnableIT_UPDATE(TIM2);
 8000ca6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000caa:	f7ff ff69 	bl	8000b80 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cb2:	f7ff fe29 	bl	8000908 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fbbf 	bl	8001458 <LL_GPIO_Init>

}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	; 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <__NVIC_GetPriorityGrouping>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LL_DMA_SetDataTransferDirection+0x48>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e18:	f023 0310 	bic.w	r3, r3, #16
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	3a01      	subs	r2, #1
 8000e20:	4907      	ldr	r1, [pc, #28]	; (8000e40 <LL_DMA_SetDataTransferDirection+0x48>)
 8000e22:	5c8a      	ldrb	r2, [r1, r2]
 8000e24:	4611      	mov	r1, r2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	440a      	add	r2, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	08002344 	.word	0x08002344

08000e44 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <LL_DMA_SetMode+0x44>)
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 0220 	bic.w	r2, r3, #32
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <LL_DMA_SetMode+0x44>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	440b      	add	r3, r1
 8000e72:	4619      	mov	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	08002344 	.word	0x08002344

08000e8c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000eb2:	5ccb      	ldrb	r3, [r1, r3]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	440b      	add	r3, r1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	08002344 	.word	0x08002344

08000ed4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <LL_DMA_SetMemoryIncMode+0x44>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	4619      	mov	r1, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	440b      	add	r3, r1
 8000f02:	4619      	mov	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	08002344 	.word	0x08002344

08000f1c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <LL_DMA_SetPeriphSize+0x44>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <LL_DMA_SetPeriphSize+0x44>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	4619      	mov	r1, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	440b      	add	r3, r1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	08002344 	.word	0x08002344

08000f64 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <LL_DMA_SetMemorySize+0x44>)
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <LL_DMA_SetMemorySize+0x44>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	440b      	add	r3, r1
 8000f92:	4619      	mov	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	08002344 	.word	0x08002344

08000fac <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	440b      	add	r3, r1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	08002344 	.word	0x08002344

08000ff4 <LL_AHB1_GRP1_EnableClock>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000

08001024 <LL_APB1_GRP1_EnableClock>:
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800102e:	69da      	ldr	r2, [r3, #28]
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_APB1_GRP1_EnableClock+0x2c>)
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000

08001054 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f043 0201 	orr.w	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3308      	adds	r3, #8
 80010ac:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	e853 3f00 	ldrex	r3, [r3]
 80010b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3308      	adds	r3, #8
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	61ba      	str	r2, [r7, #24]
 80010c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010c8:	6979      	ldr	r1, [r7, #20]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	e841 2300 	strex	r3, r2, [r1]
 80010d0:	613b      	str	r3, [r7, #16]
   return(result);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e7      	bne.n	80010a8 <LL_USART_DisableIT_CTS+0x8>
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001112:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001116:	f7ff ff85 	bl	8001024 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800111a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800111e:	f7ff ff69 	bl	8000ff4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001122:	f248 0304 	movw	r3, #32772	; 0x8004
 8001126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001128:	2302      	movs	r3, #2
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001138:	2307      	movs	r3, #7
 800113a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f000 f988 	bl	8001458 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001148:	2200      	movs	r2, #0
 800114a:	2106      	movs	r1, #6
 800114c:	4829      	ldr	r0, [pc, #164]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 800114e:	f7ff fe53 	bl	8000df8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001156:	2106      	movs	r1, #6
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 800115a:	f7ff ff27 	bl	8000fac <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 800115e:	2220      	movs	r2, #32
 8001160:	2106      	movs	r1, #6
 8001162:	4824      	ldr	r0, [pc, #144]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 8001164:	f7ff fe6e 	bl	8000e44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001168:	2200      	movs	r2, #0
 800116a:	2106      	movs	r1, #6
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 800116e:	f7ff fe8d 	bl	8000e8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	2106      	movs	r1, #6
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 8001178:	f7ff feac 	bl	8000ed4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800117c:	2200      	movs	r2, #0
 800117e:	2106      	movs	r1, #6
 8001180:	481c      	ldr	r0, [pc, #112]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 8001182:	f7ff fecb 	bl	8000f1c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001186:	2200      	movs	r2, #0
 8001188:	2106      	movs	r1, #6
 800118a:	481a      	ldr	r0, [pc, #104]	; (80011f4 <MX_USART2_UART_Init+0x10c>)
 800118c:	f7ff feea 	bl	8000f64 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001190:	f7ff fda8 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8001194:	4603      	mov	r3, r0
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fdf8 	bl	8000d90 <NVIC_EncodePriority>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	2026      	movs	r0, #38	; 0x26
 80011a6:	f7ff fdc9 	bl	8000d3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f7ff fda8 	bl	8000d00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011b4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011c2:	230c      	movs	r3, #12
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x110>)
 80011d6:	f000 ffc1 	bl	800215c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_USART2_UART_Init+0x110>)
 80011dc:	f7ff ff60 	bl	80010a0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x110>)
 80011e2:	f7ff ff47 	bl	8001074 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_USART2_UART_Init+0x110>)
 80011e8:	f7ff ff34 	bl	8001054 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	; 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40004400 	.word	0x40004400

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001226:	f7ff fad3 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f001 f83b 	bl	80022a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f9b5 	bl	800059c <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001234:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001240:	08002354 	.word	0x08002354
  ldr r2, =_sbss
 8001244:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001248:	20000024 	.word	0x20000024

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>

0800124e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800124e:	b480      	push	{r7}
 8001250:	b089      	sub	sp, #36	; 0x24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	613b      	str	r3, [r7, #16]
  return result;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2103      	movs	r1, #3
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	401a      	ands	r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa93 f3a3 	rbit	r3, r3
 8001288:	61bb      	str	r3, [r7, #24]
  return result;
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	613b      	str	r3, [r7, #16]
  return result;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2103      	movs	r1, #3
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	61bb      	str	r3, [r7, #24]
  return result;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800133a:	b480      	push	{r7}
 800133c:	b089      	sub	sp, #36	; 0x24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	613b      	str	r3, [r7, #16]
  return result;
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2103      	movs	r1, #3
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	401a      	ands	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	61bb      	str	r3, [r7, #24]
  return result;
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	613b      	str	r3, [r7, #16]
  return result;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	210f      	movs	r1, #15
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	61bb      	str	r3, [r7, #24]
  return result;
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b089      	sub	sp, #36	; 0x24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	613b      	str	r3, [r7, #16]
  return result;
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	210f      	movs	r1, #15
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	61bb      	str	r3, [r7, #24]
  return result;
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	431a      	orrs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	613b      	str	r3, [r7, #16]
  return result;
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800147a:	e051      	b.n	8001520 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d043      	beq.n	800151a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d003      	beq.n	80014a2 <LL_GPIO_Init+0x4a>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d10e      	bne.n	80014c0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	461a      	mov	r2, r3
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff16 	bl	80012dc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	461a      	mov	r2, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fef6 	bl	80012ac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	461a      	mov	r2, r3
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff36 	bl	800133a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d11a      	bne.n	800150c <LL_GPIO_Init+0xb4>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	60bb      	str	r3, [r7, #8]
  return result;
 80014e2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	d807      	bhi.n	80014fe <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff4e 	bl	8001398 <LL_GPIO_SetAFPin_0_7>
 80014fc:	e006      	b.n	800150c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	461a      	mov	r2, r3
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff75 	bl	80013f6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fe9a 	bl	800124e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1a6      	bne.n	800147c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LL_RCC_HSI_IsReady>:
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <LL_RCC_HSI_IsReady+0x20>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b02      	cmp	r3, #2
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000

0800155c <LL_RCC_LSE_IsReady>:
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <LL_RCC_LSE_IsReady+0x20>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b02      	cmp	r3, #2
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000

08001580 <LL_RCC_GetSysClkSource>:
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <LL_RCC_GetSysClkSource+0x18>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <LL_RCC_GetUSARTClockSource+0x28>)
 80015fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fc:	2103      	movs	r1, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	4313      	orrs	r3, r2
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <LL_RCC_PLL_GetMainSource+0x18>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <LL_RCC_PLL_GetPrediv+0x18>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	f003 030f 	and.w	r3, r3, #15
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001678:	f000 f864 	bl	8001744 <RCC_GetSystemClockFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f882 	bl	8001790 <RCC_GetHCLKClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f890 	bl	80017bc <RCC_GetPCLK1ClockFreq>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f89c 	bl	80017e4 <RCC_GetPCLK2ClockFreq>
 80016ac:	4602      	mov	r2, r0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60da      	str	r2, [r3, #12]
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d12d      	bne.n	800172a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff8e 	bl	80015f0 <LL_RCC_GetUSARTClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d00a      	beq.n	80016f0 <LL_RCC_GetUSARTClockFreq+0x34>
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d819      	bhi.n	8001712 <LL_RCC_GetUSARTClockFreq+0x56>
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d002      	beq.n	80016e8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d00c      	beq.n	8001700 <LL_RCC_GetUSARTClockFreq+0x44>
 80016e6:	e014      	b.n	8001712 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80016e8:	f000 f82c 	bl	8001744 <RCC_GetSystemClockFreq>
 80016ec:	60f8      	str	r0, [r7, #12]
        break;
 80016ee:	e021      	b.n	8001734 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80016f0:	f7ff ff22 	bl	8001538 <LL_RCC_HSI_IsReady>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d019      	beq.n	800172e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <LL_RCC_GetUSARTClockFreq+0x84>)
 80016fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016fe:	e016      	b.n	800172e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001700:	f7ff ff2c 	bl	800155c <LL_RCC_LSE_IsReady>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d013      	beq.n	8001732 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800170a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800170e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001710:	e00f      	b.n	8001732 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001712:	f000 f817 	bl	8001744 <RCC_GetSystemClockFreq>
 8001716:	4603      	mov	r3, r0
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f839 	bl	8001790 <RCC_GetHCLKClockFreq>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f84b 	bl	80017bc <RCC_GetPCLK1ClockFreq>
 8001726:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001728:	e004      	b.n	8001734 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001732:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	007a1200 	.word	0x007a1200

08001744 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800174e:	f7ff ff17 	bl	8001580 <LL_RCC_GetSysClkSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b08      	cmp	r3, #8
 8001756:	d00c      	beq.n	8001772 <RCC_GetSystemClockFreq+0x2e>
 8001758:	2b08      	cmp	r3, #8
 800175a:	d80e      	bhi.n	800177a <RCC_GetSystemClockFreq+0x36>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <RCC_GetSystemClockFreq+0x22>
 8001760:	2b04      	cmp	r3, #4
 8001762:	d003      	beq.n	800176c <RCC_GetSystemClockFreq+0x28>
 8001764:	e009      	b.n	800177a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <RCC_GetSystemClockFreq+0x48>)
 8001768:	607b      	str	r3, [r7, #4]
      break;
 800176a:	e009      	b.n	8001780 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <RCC_GetSystemClockFreq+0x48>)
 800176e:	607b      	str	r3, [r7, #4]
      break;
 8001770:	e006      	b.n	8001780 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001772:	f000 f84b 	bl	800180c <RCC_PLL_GetFreqDomain_SYS>
 8001776:	6078      	str	r0, [r7, #4]
      break;
 8001778:	e002      	b.n	8001780 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <RCC_GetSystemClockFreq+0x48>)
 800177c:	607b      	str	r3, [r7, #4]
      break;
 800177e:	bf00      	nop
  }

  return frequency;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	007a1200 	.word	0x007a1200

08001790 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001798:	f7ff ff00 	bl	800159c <LL_RCC_GetAHBPrescaler>
 800179c:	4603      	mov	r3, r0
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <RCC_GetHCLKClockFreq+0x28>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	40d3      	lsrs	r3, r2
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08002314 	.word	0x08002314

080017bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80017c4:	f7ff fef8 	bl	80015b8 <LL_RCC_GetAPB1Prescaler>
 80017c8:	4603      	mov	r3, r0
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	40d3      	lsrs	r3, r2
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08002324 	.word	0x08002324

080017e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80017ec:	f7ff fef2 	bl	80015d4 <LL_RCC_GetAPB2Prescaler>
 80017f0:	4603      	mov	r3, r0
 80017f2:	0adb      	lsrs	r3, r3, #11
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <RCC_GetPCLK2ClockFreq+0x24>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	40d3      	lsrs	r3, r2
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08002324 	.word	0x08002324

0800180c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800181a:	f7ff feff 	bl	800161c <LL_RCC_PLL_GetMainSource>
 800181e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d003      	beq.n	8001836 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800182e:	e005      	b.n	800183c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001832:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001834:	e005      	b.n	8001842 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001838:	60fb      	str	r3, [r7, #12]
      break;
 800183a:	e002      	b.n	8001842 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800183e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001840:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001842:	f7ff ff07 	bl	8001654 <LL_RCC_PLL_GetPrediv>
 8001846:	4603      	mov	r3, r0
 8001848:	3301      	adds	r3, #1
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	fbb2 f4f3 	udiv	r4, r2, r3
 8001850:	f7ff fef2 	bl	8001638 <LL_RCC_PLL_GetMultiplicator>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800185a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800185e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fa92 f2a2 	rbit	r2, r2
 8001866:	603a      	str	r2, [r7, #0]
  return result;
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	40d3      	lsrs	r3, r2
 8001872:	3302      	adds	r3, #2
 8001874:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	003d0900 	.word	0x003d0900
 8001884:	007a1200 	.word	0x007a1200

08001888 <LL_TIM_SetPrescaler>:
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_TIM_SetAutoReload>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_TIM_SetRepetitionCounter>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_TIM_OC_SetCompareCH1>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_TIM_OC_SetCompareCH2>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_TIM_OC_SetCompareCH3>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_TIM_OC_SetCompareCH4>:
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_TIM_OC_SetCompareCH5>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_TIM_OC_SetCompareCH6>:
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	615a      	str	r2, [r3, #20]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <LL_TIM_Init+0xd0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <LL_TIM_Init+0x28>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d003      	beq.n	80019d0 <LL_TIM_Init+0x28>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <LL_TIM_Init+0xd4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d106      	bne.n	80019de <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <LL_TIM_Init+0xd0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <LL_TIM_Init+0x66>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d00f      	beq.n	8001a0e <LL_TIM_Init+0x66>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <LL_TIM_Init+0xd4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00b      	beq.n	8001a0e <LL_TIM_Init+0x66>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <LL_TIM_Init+0xd8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <LL_TIM_Init+0x66>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <LL_TIM_Init+0xdc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d003      	beq.n	8001a0e <LL_TIM_Init+0x66>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <LL_TIM_Init+0xe0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d106      	bne.n	8001a1c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4619      	mov	r1, r3
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff3b 	bl	80018a4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff27 	bl	8001888 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <LL_TIM_Init+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00b      	beq.n	8001a5a <LL_TIM_Init+0xb2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LL_TIM_Init+0xd8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <LL_TIM_Init+0xb2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <LL_TIM_Init+0xdc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d003      	beq.n	8001a5a <LL_TIM_Init+0xb2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a0c      	ldr	r2, [pc, #48]	; (8001a88 <LL_TIM_Init+0xe0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d105      	bne.n	8001a66 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff2d 	bl	80018c0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff8e 	bl	8001988 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40014000 	.word	0x40014000
 8001a84:	40014400 	.word	0x40014400
 8001a88:	40014800 	.word	0x40014800

08001a8c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aa2:	d045      	beq.n	8001b30 <LL_TIM_OC_Init+0xa4>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aaa:	d848      	bhi.n	8001b3e <LL_TIM_OC_Init+0xb2>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab2:	d036      	beq.n	8001b22 <LL_TIM_OC_Init+0x96>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d840      	bhi.n	8001b3e <LL_TIM_OC_Init+0xb2>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac2:	d027      	beq.n	8001b14 <LL_TIM_OC_Init+0x88>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	d838      	bhi.n	8001b3e <LL_TIM_OC_Init+0xb2>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad2:	d018      	beq.n	8001b06 <LL_TIM_OC_Init+0x7a>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ada:	d830      	bhi.n	8001b3e <LL_TIM_OC_Init+0xb2>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d003      	beq.n	8001aea <LL_TIM_OC_Init+0x5e>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d007      	beq.n	8001af8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001ae8:	e029      	b.n	8001b3e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f82d 	bl	8001b4c <OC1Config>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]
      break;
 8001af6:	e023      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f8a0 	bl	8001c40 <OC2Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	75fb      	strb	r3, [r7, #23]
      break;
 8001b04:	e01c      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f917 	bl	8001d3c <OC3Config>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]
      break;
 8001b12:	e015      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 f98e 	bl	8001e38 <OC4Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001b20:	e00e      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f9ed 	bl	8001f04 <OC5Config>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8001b2e:	e007      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fa44 	bl	8001fc0 <OC6Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3c:	e000      	b.n	8001b40 <LL_TIM_OC_Init+0xb4>
      break;
 8001b3e:	bf00      	nop
  }

  return result;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	f023 0201 	bic.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f023 0202 	bic.w	r2, r3, #2
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f023 0201 	bic.w	r2, r3, #1
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <OC1Config+0xe4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00b      	beq.n	8001bca <OC1Config+0x7e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <OC1Config+0xe8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <OC1Config+0x7e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <OC1Config+0xec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d003      	beq.n	8001bca <OC1Config+0x7e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <OC1Config+0xf0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11e      	bne.n	8001c08 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f023 0208 	bic.w	r2, r3, #8
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f023 0204 	bic.w	r2, r3, #4
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fe5e 	bl	80018dc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40014000 	.word	0x40014000
 8001c38:	40014400 	.word	0x40014400
 8001c3c:	40014800 	.word	0x40014800

08001c40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0210 	bic.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	0212      	lsls	r2, r2, #8
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0220 	bic.w	r2, r3, #32
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0210 	bic.w	r2, r3, #16
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <OC2Config+0xec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00b      	beq.n	8001cc4 <OC2Config+0x84>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <OC2Config+0xf0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <OC2Config+0x84>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <OC2Config+0xf4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <OC2Config+0x84>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <OC2Config+0xf8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d11f      	bne.n	8001d04 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	019b      	lsls	r3, r3, #6
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fdee 	bl	80018f8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40014000 	.word	0x40014000
 8001d34:	40014400 	.word	0x40014400
 8001d38:	40014800 	.word	0x40014800

08001d3c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <OC3Config+0xec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00b      	beq.n	8001dbe <OC3Config+0x82>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <OC3Config+0xf0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <OC3Config+0x82>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <OC3Config+0xf4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <OC3Config+0x82>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <OC3Config+0xf8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d11f      	bne.n	8001dfe <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	015b      	lsls	r3, r3, #5
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fd7f 	bl	8001914 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40014800 	.word	0x40014800

08001e38 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	0212      	lsls	r2, r2, #8
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	031b      	lsls	r3, r3, #12
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	031b      	lsls	r3, r3, #12
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <OC4Config+0xbc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00b      	beq.n	8001ebc <OC4Config+0x84>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <OC4Config+0xc0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <OC4Config+0x84>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <OC4Config+0xc4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <OC4Config+0x84>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <OC4Config+0xc8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d107      	bne.n	8001ecc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	019b      	lsls	r3, r3, #6
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fd26 	bl	8001930 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800

08001f04 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	041b      	lsls	r3, r3, #16
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <OC5Config+0xac>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <OC5Config+0x74>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <OC5Config+0xb0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <OC5Config+0x74>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <OC5Config+0xb4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d003      	beq.n	8001f78 <OC5Config+0x74>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <OC5Config+0xb8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d109      	bne.n	8001f8c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fcd7 	bl	800194c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40014800 	.word	0x40014800

08001fc0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	0212      	lsls	r2, r2, #8
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	051b      	lsls	r3, r3, #20
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <OC6Config+0xac>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <OC6Config+0x76>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <OC6Config+0xb0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <OC6Config+0x76>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <OC6Config+0xb4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <OC6Config+0x76>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <OC6Config+0xb8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d109      	bne.n	800204a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	029b      	lsls	r3, r3, #10
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fc88 	bl	800196c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40014000 	.word	0x40014000
 8002074:	40014400 	.word	0x40014400
 8002078:	40014800 	.word	0x40014800

0800207c <LL_USART_IsEnabled>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <LL_USART_IsEnabled+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_USART_IsEnabled+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_USART_SetStopBitsLength>:
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	605a      	str	r2, [r3, #4]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_USART_SetHWFlowCtrl>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_USART_SetBaudRate>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002102:	d11a      	bne.n	800213a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	005a      	lsls	r2, r3, #1
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	441a      	add	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	b29b      	uxth	r3, r3
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	e00a      	b.n	8002150 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	085a      	lsrs	r2, r3, #1
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	441a      	add	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff84 	bl	800207c <LL_USART_IsEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d14e      	bne.n	8002218 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <LL_USART_Init+0xc8>)
 8002180:	4013      	ands	r3, r2
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	6851      	ldr	r1, [r2, #4]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	68d2      	ldr	r2, [r2, #12]
 800218a:	4311      	orrs	r1, r2
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	6912      	ldr	r2, [r2, #16]
 8002190:	4311      	orrs	r1, r2
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	6992      	ldr	r2, [r2, #24]
 8002196:	430a      	orrs	r2, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff7c 	bl	80020a2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff89 	bl	80020c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <LL_USART_Init+0xcc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d104      	bne.n	80021c8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fa7c 	bl	80016bc <LL_RCC_GetUSARTClockFreq>
 80021c4:	61b8      	str	r0, [r7, #24]
 80021c6:	e016      	b.n	80021f6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <LL_USART_Init+0xd0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d107      	bne.n	80021e0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fa4b 	bl	8001670 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e00a      	b.n	80021f6 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <LL_USART_Init+0xd4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d106      	bne.n	80021f6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fa3f 	bl	8001670 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69b9      	ldr	r1, [r7, #24]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff6b 	bl	80020ee <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002218:	7ffb      	ldrb	r3, [r7, #31]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	efff69f3 	.word	0xefff69f3
 8002228:	40013800 	.word	0x40013800
 800222c:	40004400 	.word	0x40004400
 8002230:	40004800 	.word	0x40004800

08002234 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <LL_InitTick+0x30>)
 8002248:	3b01      	subs	r3, #1
 800224a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <LL_InitTick+0x30>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_InitTick+0x30>)
 8002254:	2205      	movs	r2, #5
 8002256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e010 	.word	0xe000e010

08002268 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002270:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ffdd 	bl	8002234 <LL_InitTick>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <LL_SetSystemCoreClock+0x1c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000

080022a4 <__libc_init_array>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	4d0d      	ldr	r5, [pc, #52]	; (80022dc <__libc_init_array+0x38>)
 80022a8:	4c0d      	ldr	r4, [pc, #52]	; (80022e0 <__libc_init_array+0x3c>)
 80022aa:	1b64      	subs	r4, r4, r5
 80022ac:	10a4      	asrs	r4, r4, #2
 80022ae:	2600      	movs	r6, #0
 80022b0:	42a6      	cmp	r6, r4
 80022b2:	d109      	bne.n	80022c8 <__libc_init_array+0x24>
 80022b4:	4d0b      	ldr	r5, [pc, #44]	; (80022e4 <__libc_init_array+0x40>)
 80022b6:	4c0c      	ldr	r4, [pc, #48]	; (80022e8 <__libc_init_array+0x44>)
 80022b8:	f000 f820 	bl	80022fc <_init>
 80022bc:	1b64      	subs	r4, r4, r5
 80022be:	10a4      	asrs	r4, r4, #2
 80022c0:	2600      	movs	r6, #0
 80022c2:	42a6      	cmp	r6, r4
 80022c4:	d105      	bne.n	80022d2 <__libc_init_array+0x2e>
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022cc:	4798      	blx	r3
 80022ce:	3601      	adds	r6, #1
 80022d0:	e7ee      	b.n	80022b0 <__libc_init_array+0xc>
 80022d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d6:	4798      	blx	r3
 80022d8:	3601      	adds	r6, #1
 80022da:	e7f2      	b.n	80022c2 <__libc_init_array+0x1e>
 80022dc:	0800234c 	.word	0x0800234c
 80022e0:	0800234c 	.word	0x0800234c
 80022e4:	0800234c 	.word	0x0800234c
 80022e8:	08002350 	.word	0x08002350

080022ec <memset>:
 80022ec:	4402      	add	r2, r0
 80022ee:	4603      	mov	r3, r0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	f803 1b01 	strb.w	r1, [r3], #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	bf00      	nop
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
