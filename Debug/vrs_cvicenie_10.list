
vrs_cvicenie_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002ea8  08002ea8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ea8  08002ea8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000104  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ada2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7c  00000000  00000000  0002ae3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000768  00000000  00000000  0002d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001738f  00000000  00000000  0002db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006cb0  00000000  00000000  00044edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000791b6  00000000  00000000  0004bb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c4d45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002234  00000000  00000000  000c4d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d44 	.word	0x08002d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08002d44 	.word	0x08002d44

080001c8 <__NVIC_GetPriorityGrouping>:
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
 80002cc:	4313      	orrs	r3, r2
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <LL_AHB1_GRP1_EnableClock>:
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	4907      	ldr	r1, [pc, #28]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4313      	orrs	r3, r2
 800034e:	614b      	str	r3, [r1, #20]
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
 8000370:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000374:	f7ff ffe2 	bl	800033c <LL_AHB1_GRP1_EnableClock>
 8000378:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800037c:	f7ff ffde 	bl	800033c <LL_AHB1_GRP1_EnableClock>
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b6:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	60d3      	str	r3, [r2, #12]
}
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_HSI_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	b2db      	uxtb	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	4904      	ldr	r1, [pc, #16]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000426:	4313      	orrs	r3, r2
 8000428:	600b      	str	r3, [r1, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f023 0203 	bic.w	r2, r3, #3
 800044c:	4904      	ldr	r1, [pc, #16]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	604b      	str	r3, [r1, #4]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <LL_RCC_GetSysClkSource+0x18>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f003 030c 	and.w	r3, r3, #12
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000490:	4904      	ldr	r1, [pc, #16]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004b8:	4904      	ldr	r1, [pc, #16]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	604b      	str	r3, [r1, #4]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_FLASH_SetLatency+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_FLASH_SetLatency+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40022000 	.word	0x40022000

08000580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_FLASH_GetLatency+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0307 	and.w	r3, r3, #7
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	PWM_Value = 0;
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <main+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	PWM_ValueReq = 0;
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <main+0xb8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	PWM_ValueDirection = Direction_DownUp;
 80005ca:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <main+0xbc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	mode = Mode_Auto;
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <main+0xc0>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
	BufferCapacity.capacity = DMA_USART2_BUFFER_SIZE;
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <main+0xc4>)
 80005d8:	2280      	movs	r2, #128	; 0x80
 80005da:	801a      	strh	r2, [r3, #0]
	BufferCapacity.reserved = 0;
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <main+0xc4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	805a      	strh	r2, [r3, #2]
	cmdData = CommandDataEnum_None;
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <main+0xc8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	ReceivedDataStr.receivedData = 0;
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <main+0xcc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff9a 	bl	8000528 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005f8:	f7ff ff7e 	bl	80004f8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f7ff fec1 	bl	8000384 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000602:	f000 f845 	bl	8000690 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000606:	f7ff feb1 	bl	800036c <MX_GPIO_Init>
	MX_DMA_Init();
 800060a:	f7ff fe7f 	bl	800030c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800060e:	f001 f92f 	bl	8001870 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000612:	f000 fcf9 	bl	8001008 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	TIM2_RegisterCallback(setDutyCycle);
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <main+0xd0>)
 8000618:	f000 fce4 	bl	8000fe4 <TIM2_RegisterCallback>
	USART2_RegisterCallback(proccesDmaData);
 800061c:	481b      	ldr	r0, [pc, #108]	; (800068c <main+0xd4>)
 800061e:	f001 f9df 	bl	80019e0 <USART2_RegisterCallback>
		 PWM_ValueReq = 50;
		 LL_mDelay(10000);
		 PWM_ValueReq = 80;
		 LL_mDelay(10000);
		 mode = Mode_Auto;*/
		if (ReceivedDataStr.receivedData == 1) {
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <main+0xcc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1fb      	bne.n	8000622 <main+0x6a>
			CommandDataEnum respond = ParseReceivedString(&ReceivedDataStr);
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <main+0xcc>)
 800062c:	f000 f94c 	bl	80008c8 <ParseReceivedString>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
			switch (respond) {
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d00d      	beq.n	8000656 <main+0x9e>
 800063a:	2b03      	cmp	r3, #3
 800063c:	dc11      	bgt.n	8000662 <main+0xaa>
 800063e:	2b01      	cmp	r3, #1
 8000640:	d005      	beq.n	800064e <main+0x96>
 8000642:	2b02      	cmp	r3, #2
 8000644:	d10d      	bne.n	8000662 <main+0xaa>
			default:
				break;
			case CommandDataEnum_ModeAuto:
				mode = Mode_Auto;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0xc0>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
				break;
 800064c:	e00a      	b.n	8000664 <main+0xac>
			case CommandDataEnum_ModeMan:
				mode = Mode_Man;
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
				break;
 8000654:	e006      	b.n	8000664 <main+0xac>
			case CommandDataEnum_CmdPwm:
				PWM_ValueReq = ReceivedDataStr.value;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <main+0xcc>)
 8000658:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <main+0xb8>)
 800065e:	701a      	strb	r2, [r3, #0]
				break;
 8000660:	e000      	b.n	8000664 <main+0xac>
				break;
 8000662:	bf00      	nop
			}
			ReceivedDataStr.receivedData = 0;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <main+0xcc>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
		if (ReceivedDataStr.receivedData == 1) {
 800066a:	e7da      	b.n	8000622 <main+0x6a>
 800066c:	20000098 	.word	0x20000098
 8000670:	20000095 	.word	0x20000095
 8000674:	20000094 	.word	0x20000094
 8000678:	20000096 	.word	0x20000096
 800067c:	2000009c 	.word	0x2000009c
 8000680:	20000097 	.word	0x20000097
 8000684:	200000a0 	.word	0x200000a0
 8000688:	080006f5 	.word	0x080006f5
 800068c:	0800075d 	.word	0x0800075d

08000690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff5f 	bl	8000558 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 800069a:	bf00      	nop
 800069c:	f7ff ff70 	bl	8000580 <LL_FLASH_GetLatency>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1fa      	bne.n	800069c <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 80006a6:	f7ff fe91 	bl	80003cc <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 80006aa:	bf00      	nop
 80006ac:	f7ff fe9e 	bl	80003ec <LL_RCC_HSI_IsReady>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d1fa      	bne.n	80006ac <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 80006b6:	2010      	movs	r0, #16
 80006b8:	f7ff feaa 	bl	8000410 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fedf 	bl	8000480 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fef0 	bl	80004a8 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ff01 	bl	80004d0 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff feb4 	bl	800043c <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80006d4:	bf00      	nop
 80006d6:	f7ff fec5 	bl	8000464 <LL_RCC_GetSysClkSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1fa      	bne.n	80006d6 <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <SystemClock_Config+0x60>)
 80006e2:	f002 fa2d 	bl	8002b40 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <SystemClock_Config+0x60>)
 80006e8:	f002 fa38 	bl	8002b5c <LL_SetSystemCoreClock>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	007a1200 	.word	0x007a1200

080006f4 <setDutyCycle>:

/* USER CODE BEGIN 4 */
void setDutyCycle(uint8_t D) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	if (mode == Mode_Auto) {
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <setDutyCycle+0x5c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d109      	bne.n	800071a <setDutyCycle+0x26>
		D = CountDutyCycleForModeAuto(D);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f885 	bl	8000818 <CountDutyCycleForModeAuto>
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
		PWM_ValueReq = D;
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <setDutyCycle+0x60>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	7013      	strb	r3, [r2, #0]
 8000718:	e00c      	b.n	8000734 <setDutyCycle+0x40>
	} else if (mode == Mode_Man)
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <setDutyCycle+0x5c>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d108      	bne.n	8000734 <setDutyCycle+0x40>
		D = CountDutyCycleForModeMan(D, PWM_ValueReq);
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <setDutyCycle+0x60>)
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8b4 	bl	8000898 <CountDutyCycleForModeMan>
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
	LL_TIM_OC_SetCompareCH1(TIM2, D);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800073c:	f7ff ff2e 	bl	800059c <LL_TIM_OC_SetCompareCH1>
	PWM_Value = D;
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <setDutyCycle+0x64>)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	7013      	strb	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000096 	.word	0x20000096
 8000754:	20000095 	.word	0x20000095
 8000758:	20000098 	.word	0x20000098

0800075c <proccesDmaData>:

void proccesDmaData(uint8_t sign) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	static uint8_t receivedLetters = 0;
	if (sign == SIGN_FILE_START && SignStartDet != 1) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b24      	cmp	r3, #36	; 0x24
 800076a:	d10d      	bne.n	8000788 <proccesDmaData+0x2c>
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <proccesDmaData+0xac>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d009      	beq.n	8000788 <proccesDmaData+0x2c>
		SignStartDet = 1;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <proccesDmaData+0xac>)
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
		SignEndDet = 0;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <proccesDmaData+0xb0>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		receivedLetters = 0;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <proccesDmaData+0xb4>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	e01b      	b.n	80007c0 <proccesDmaData+0x64>
	} else if (SignStartDet == 1 && receivedLetters < SIGN_RECEIVED_MAX_COUNT) {
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <proccesDmaData+0xac>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d117      	bne.n	80007c0 <proccesDmaData+0x64>
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <proccesDmaData+0xb4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b23      	cmp	r3, #35	; 0x23
 8000796:	d813      	bhi.n	80007c0 <proccesDmaData+0x64>
		if (sign == SIGN_FILE_END) {
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b24      	cmp	r3, #36	; 0x24
 800079c:	d103      	bne.n	80007a6 <proccesDmaData+0x4a>
			SignEndDet = 1;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <proccesDmaData+0xb0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e006      	b.n	80007b4 <proccesDmaData+0x58>
		} else {
			ReceivedDataStr.receivedStr[receivedLetters] = sign;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <proccesDmaData+0xb4>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <proccesDmaData+0xb8>)
 80007ae:	4413      	add	r3, r2
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	705a      	strb	r2, [r3, #1]
		}
		receivedLetters++;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <proccesDmaData+0xb4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <proccesDmaData+0xb4>)
 80007be:	701a      	strb	r2, [r3, #0]
	}
	if (SignStartDet
			== 1&& SignEndDet == 1 && receivedLetters <= SIGN_RECEIVED_MAX_COUNT) {
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <proccesDmaData+0xac>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
	if (SignStartDet
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10e      	bne.n	80007e6 <proccesDmaData+0x8a>
			== 1&& SignEndDet == 1 && receivedLetters <= SIGN_RECEIVED_MAX_COUNT) {
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <proccesDmaData+0xb0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10a      	bne.n	80007e6 <proccesDmaData+0x8a>
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <proccesDmaData+0xb4>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b24      	cmp	r3, #36	; 0x24
 80007d6:	d806      	bhi.n	80007e6 <proccesDmaData+0x8a>
		ReceivedDataStr.receivedData = 1;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <proccesDmaData+0xb8>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
		SignStartDet = 0;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <proccesDmaData+0xac>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	} else if (SignStartDet == 1 && receivedLetters > SIGN_RECEIVED_MAX_COUNT)
		SignStartDet = 0;
}
 80007e4:	e00a      	b.n	80007fc <proccesDmaData+0xa0>
	} else if (SignStartDet == 1 && receivedLetters > SIGN_RECEIVED_MAX_COUNT)
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <proccesDmaData+0xac>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d106      	bne.n	80007fc <proccesDmaData+0xa0>
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <proccesDmaData+0xb4>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b24      	cmp	r3, #36	; 0x24
 80007f4:	d902      	bls.n	80007fc <proccesDmaData+0xa0>
		SignStartDet = 0;
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <proccesDmaData+0xac>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	20000084 	.word	0x20000084
 800080c:	20000085 	.word	0x20000085
 8000810:	20000086 	.word	0x20000086
 8000814:	200000a0 	.word	0x200000a0

08000818 <CountDutyCycleForModeAuto>:

uint8_t CountDutyCycleForModeAuto(uint8_t D) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	if (D < PWM_VALUE_MAX && PWM_ValueDirection == Direction_DownUp)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b62      	cmp	r3, #98	; 0x62
 8000826:	d807      	bhi.n	8000838 <CountDutyCycleForModeAuto+0x20>
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <CountDutyCycleForModeAuto+0x20>
		D += 1;
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	3301      	adds	r3, #1
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	e025      	b.n	8000884 <CountDutyCycleForModeAuto+0x6c>
	else if (D >= PWM_VALUE_MAX && PWM_ValueDirection == Direction_DownUp) {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b62      	cmp	r3, #98	; 0x62
 800083c:	d90a      	bls.n	8000854 <CountDutyCycleForModeAuto+0x3c>
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <CountDutyCycleForModeAuto+0x3c>
		PWM_ValueDirection = Direction_UpDown;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
		D -= 1;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3b01      	subs	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e017      	b.n	8000884 <CountDutyCycleForModeAuto+0x6c>
	} else if (D > PWM_VALUE_MIN && PWM_ValueDirection == Direction_UpDown)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d007      	beq.n	800086a <CountDutyCycleForModeAuto+0x52>
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d103      	bne.n	800086a <CountDutyCycleForModeAuto+0x52>
		D -= 1;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	3b01      	subs	r3, #1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	e00c      	b.n	8000884 <CountDutyCycleForModeAuto+0x6c>
	else if (D <= PWM_VALUE_MIN && PWM_ValueDirection == Direction_UpDown) {
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <CountDutyCycleForModeAuto+0x6c>
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d105      	bne.n	8000884 <CountDutyCycleForModeAuto+0x6c>
		PWM_ValueDirection = Direction_DownUp;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <CountDutyCycleForModeAuto+0x7c>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
		D += 1;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	3301      	adds	r3, #1
 8000882:	71fb      	strb	r3, [r7, #7]
	}
	return D;
 8000884:	79fb      	ldrb	r3, [r7, #7]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000094 	.word	0x20000094

08000898 <CountDutyCycleForModeMan>:
uint8_t CountDutyCycleForModeMan(uint8_t D, uint8_t reqD) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	if (D != reqD) {
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d005      	beq.n	80008bc <CountDutyCycleForModeMan+0x24>
		D = CountDutyCycleForModeAuto(D);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffb0 	bl	8000818 <CountDutyCycleForModeAuto>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
	}
	return D;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <ParseReceivedString>:

CommandDataEnum ParseReceivedString(ReceivedDataStruct *ReceivedData) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	CommandDataEnum result = CommandDataEnum_None;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
	if (strstr((const char*) ReceivedData->receivedStr,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4928      	ldr	r1, [pc, #160]	; (800097c <ParseReceivedString+0xb4>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 f98c 	bl	8002bf8 <strstr>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00b      	beq.n	80008fe <ParseReceivedString+0x36>
			(const char*) CMD_AUTO) != NULL) {
		strcpy((char*) ReceivedData->receivedCommand,
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f103 0225 	add.w	r2, r3, #37	; 0x25
				(const char*) ReceivedData->receivedStr);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
		strcpy((char*) ReceivedData->receivedCommand,
 80008f0:	4619      	mov	r1, r3
 80008f2:	4610      	mov	r0, r2
 80008f4:	f002 f978 	bl	8002be8 <strcpy>
		result = CommandDataEnum_ModeAuto;
 80008f8:	2302      	movs	r3, #2
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e038      	b.n	8000970 <ParseReceivedString+0xa8>
	} else if (strstr((const char*) ReceivedData->receivedStr,
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3301      	adds	r3, #1
 8000902:	491f      	ldr	r1, [pc, #124]	; (8000980 <ParseReceivedString+0xb8>)
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f977 	bl	8002bf8 <strstr>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00b      	beq.n	8000928 <ParseReceivedString+0x60>
			(const char*) CMD_MAN) != NULL) {
		strcpy((char*) ReceivedData->receivedCommand,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f103 0225 	add.w	r2, r3, #37	; 0x25
				(const char*) ReceivedData->receivedStr);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3301      	adds	r3, #1
		strcpy((char*) ReceivedData->receivedCommand,
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f002 f963 	bl	8002be8 <strcpy>
		result = CommandDataEnum_ModeMan;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e023      	b.n	8000970 <ParseReceivedString+0xa8>
	} else if (strstr((const char*) ReceivedData->receivedStr,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	4915      	ldr	r1, [pc, #84]	; (8000984 <ParseReceivedString+0xbc>)
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f962 	bl	8002bf8 <strstr>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d01a      	beq.n	8000970 <ParseReceivedString+0xa8>
			(const char*) CMD_PWM) != NULL) {
		strcpy((char*) ReceivedData->receivedCommand,
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f103 0225 	add.w	r2, r3, #37	; 0x25
				(const char*) ReceivedData->receivedStr);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
		strcpy((char*) ReceivedData->receivedCommand,
 8000944:	4619      	mov	r1, r3
 8000946:	4610      	mov	r0, r2
 8000948:	f002 f94e 	bl	8002be8 <strcpy>
		int8_t respond = ParseReceivedCommandValue(
				ReceivedData->receivedCommand,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3325      	adds	r3, #37	; 0x25
		int8_t respond = ParseReceivedCommandValue(
 8000950:	2105      	movs	r1, #5
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f818 	bl	8000988 <ParseReceivedCommandValue>
 8000958:	4603      	mov	r3, r0
 800095a:	73bb      	strb	r3, [r7, #14]
				(uint8_t) 5);
		if (respond > -1) {
 800095c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db05      	blt.n	8000970 <ParseReceivedString+0xa8>
			ReceivedData->value = respond;
 8000964:	7bba      	ldrb	r2, [r7, #14]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			result = CommandDataEnum_CmdPwm;
 800096c:	2303      	movs	r3, #3
 800096e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return result;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08002d5c 	.word	0x08002d5c
 8000980:	08002d64 	.word	0x08002d64
 8000984:	08002d6c 	.word	0x08002d6c

08000988 <ParseReceivedCommandValue>:
int8_t ParseReceivedCommandValue(uint8_t *cmdData, uint8_t lenght) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
	uint8_t result = -1;
 8000994:	23ff      	movs	r3, #255	; 0xff
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t array[SIGN_RECEIVED_MAX_COUNT] = { 0 };
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 f916 	bl	8002bd8 <memset>
	uint8_t index = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < lenght; i++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80009b8:	e01f      	b.n	80009fa <ParseReceivedCommandValue+0x72>
		uint8_t chr = cmdData[i];
 80009ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		if (chr >= '0' && chr <= '9') {
 80009c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009cc:	2b2f      	cmp	r3, #47	; 0x2f
 80009ce:	d90f      	bls.n	80009f0 <ParseReceivedCommandValue+0x68>
 80009d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009d4:	2b39      	cmp	r3, #57	; 0x39
 80009d6:	d80b      	bhi.n	80009f0 <ParseReceivedCommandValue+0x68>
			array[index++] = chr;
 80009d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80009e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80009e6:	4413      	add	r3, r2
 80009e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80009ec:	f803 2c28 	strb.w	r2, [r3, #-40]
	for (uint8_t i = 0; i < lenght; i++) {
 80009f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009f4:	3301      	adds	r3, #1
 80009f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80009fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3da      	bcc.n	80009ba <ParseReceivedCommandValue+0x32>
		}
	}
	if (index > 0)
 8000a04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d007      	beq.n	8000a1c <ParseReceivedCommandValue+0x94>
		result = atoi((const char*) array);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 f8b3 	bl	8002b7c <atoi>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return result;
 8000a1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <LL_DMA_IsActiveFlag_TC6>:
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_DMA_IsActiveFlag_HT6>:
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a64:	bf0c      	ite	eq
 8000a66:	2301      	moveq	r3, #1
 8000a68:	2300      	movne	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_DMA_ClearFlag_TC6>:
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <LL_DMA_ClearFlag_HT6>:
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_TIM_ClearFlag_UPDATE>:
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f06f 0201 	mvn.w	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_TIM_IsActiveFlag_UPDATE>:
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <LL_USART_IsActiveFlag_IDLE>:
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	2b10      	cmp	r3, #16
 8000b04:	d101      	bne.n	8000b0a <LL_USART_IsActiveFlag_IDLE+0x18>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_USART_ClearFlag_IDLE>:
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2210      	movs	r2, #16
 8000b24:	621a      	str	r2, [r3, #32]
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <NMI_Handler>:
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	e7fe      	b.n	8000b36 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	e7fe      	b.n	8000b3c <HardFault_Handler+0x4>

08000b3e <MemManage_Handler>:
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	e7fe      	b.n	8000b42 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	e7fe      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4a <UsageFault_Handler>:
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	e7fe      	b.n	8000b4e <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <PendSV_Handler>:
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DMA1_Channel6_IRQHandler>:
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <DMA1_Channel6_IRQHandler+0x38>)
 8000b8e:	f7ff ff4b 	bl	8000a28 <LL_DMA_IsActiveFlag_TC6>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <DMA1_Channel6_IRQHandler+0x1c>
 8000b98:	f000 ff34 	bl	8001a04 <USART2_CheckDmaReception>
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <DMA1_Channel6_IRQHandler+0x38>)
 8000b9e:	f7ff ff6b 	bl	8000a78 <LL_DMA_ClearFlag_TC6>
 8000ba2:	e00a      	b.n	8000bba <DMA1_Channel6_IRQHandler+0x32>
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <DMA1_Channel6_IRQHandler+0x38>)
 8000ba6:	f7ff ff53 	bl	8000a50 <LL_DMA_IsActiveFlag_HT6>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <DMA1_Channel6_IRQHandler+0x32>
 8000bb0:	f000 ff28 	bl	8001a04 <USART2_CheckDmaReception>
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Channel6_IRQHandler+0x38>)
 8000bb6:	f7ff ff6d 	bl	8000a94 <LL_DMA_ClearFlag_HT6>
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <TIM2_IRQHandler>:
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bcc:	f7ff ff7e 	bl	8000acc <LL_TIM_IsActiveFlag_UPDATE>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <TIM2_IRQHandler+0x1c>
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <TIM2_IRQHandler+0x28>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fd8a 	bl	80006f4 <setDutyCycle>
 8000be0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000be4:	f7ff ff64 	bl	8000ab0 <LL_TIM_ClearFlag_UPDATE>
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000098 	.word	0x20000098

08000bf0 <USART2_IRQHandler>:
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <USART2_IRQHandler+0x20>)
 8000bf6:	f7ff ff7c 	bl	8000af2 <LL_USART_IsActiveFlag_IDLE>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <USART2_IRQHandler+0x14>
 8000c00:	f000 ff00 	bl	8001a04 <USART2_CheckDmaReception>
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART2_IRQHandler+0x20>)
 8000c06:	f7ff ff87 	bl	8000b18 <LL_USART_ClearFlag_IDLE>
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40004400 	.word	0x40004400

08000c14 <SystemInit>:
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <LL_AHB1_GRP1_EnableClock>:
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	614b      	str	r3, [r1, #20]
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_APB1_GRP1_EnableClock>:
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61cb      	str	r3, [r1, #28]
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d92:	69da      	ldr	r2, [r3, #28]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4013      	ands	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <LL_TIM_EnableCounter>:
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f043 0201 	orr.w	r2, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_TIM_DisableARRPreload>:
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_TIM_CC_EnableChannel>:
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a1a      	ldr	r2, [r3, #32]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	621a      	str	r2, [r3, #32]
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <LL_TIM_OC_DisableFast>:
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d028      	beq.n	8000e72 <LL_TIM_OC_DisableFast+0x62>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d023      	beq.n	8000e6e <LL_TIM_OC_DisableFast+0x5e>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d01e      	beq.n	8000e6a <LL_TIM_OC_DisableFast+0x5a>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b40      	cmp	r3, #64	; 0x40
 8000e30:	d019      	beq.n	8000e66 <LL_TIM_OC_DisableFast+0x56>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e38:	d013      	beq.n	8000e62 <LL_TIM_OC_DisableFast+0x52>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e40:	d00d      	beq.n	8000e5e <LL_TIM_OC_DisableFast+0x4e>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e48:	d007      	beq.n	8000e5a <LL_TIM_OC_DisableFast+0x4a>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e50:	d101      	bne.n	8000e56 <LL_TIM_OC_DisableFast+0x46>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e00e      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e56:	2308      	movs	r3, #8
 8000e58:	e00c      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00a      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e008      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e006      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_TIM_OC_DisableFast+0x64>
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LL_TIM_OC_DisableFast+0x9c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	440b      	add	r3, r1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <LL_TIM_OC_DisableFast+0xa0>)
 8000e8e:	5ccb      	ldrb	r3, [r1, r3]
 8000e90:	4619      	mov	r1, r3
 8000e92:	2304      	movs	r3, #4
 8000e94:	408b      	lsls	r3, r1
 8000e96:	43db      	mvns	r3, r3
 8000e98:	401a      	ands	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08002d88 	.word	0x08002d88
 8000eb0:	08002d94 	.word	0x08002d94

08000eb4 <LL_TIM_OC_EnablePreload>:
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d028      	beq.n	8000f16 <LL_TIM_OC_EnablePreload+0x62>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d023      	beq.n	8000f12 <LL_TIM_OC_EnablePreload+0x5e>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b10      	cmp	r3, #16
 8000ece:	d01e      	beq.n	8000f0e <LL_TIM_OC_EnablePreload+0x5a>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b40      	cmp	r3, #64	; 0x40
 8000ed4:	d019      	beq.n	8000f0a <LL_TIM_OC_EnablePreload+0x56>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000edc:	d013      	beq.n	8000f06 <LL_TIM_OC_EnablePreload+0x52>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee4:	d00d      	beq.n	8000f02 <LL_TIM_OC_EnablePreload+0x4e>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eec:	d007      	beq.n	8000efe <LL_TIM_OC_EnablePreload+0x4a>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d101      	bne.n	8000efa <LL_TIM_OC_EnablePreload+0x46>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e00e      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000efa:	2308      	movs	r3, #8
 8000efc:	e00c      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e00a      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f02:	2305      	movs	r3, #5
 8000f04:	e008      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_TIM_OC_EnablePreload+0x64>
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LL_TIM_OC_EnablePreload+0x98>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	440b      	add	r3, r1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <LL_TIM_OC_EnablePreload+0x9c>)
 8000f32:	5ccb      	ldrb	r3, [r1, r3]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2308      	movs	r3, #8
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	08002d88 	.word	0x08002d88
 8000f50:	08002d94 	.word	0x08002d94

08000f54 <LL_TIM_SetClockSource>:
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000f66:	f023 0307 	bic.w	r3, r3, #7
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_TIM_SetTriggerOutput>:
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_TIM_DisableMasterSlaveMode>:
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_TIM_EnableIT_UPDATE>:
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <TIM2_RegisterCallback>:
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <TIM2_RegisterCallback+0x14>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <TIM2_RegisterCallback+0x20>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000088 	.word	0x20000088

08001008 <MX_TIM2_Init>:
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
 800100e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2220      	movs	r2, #32
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fdd6 	bl	8002bd8 <memset>
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe9d 	bl	8000d7c <LL_APB1_GRP1_EnableClock>
 8001042:	f7ff fdf9 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8001046:	4603      	mov	r3, r0
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe49 	bl	8000ce4 <NVIC_EncodePriority>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	201c      	movs	r0, #28
 8001058:	f7ff fe1a 	bl	8000c90 <__NVIC_SetPriority>
 800105c:	201c      	movs	r0, #28
 800105e:	f7ff fdf9 	bl	8000c54 <__NVIC_EnableIRQ>
 8001062:	f240 331f 	movw	r3, #799	; 0x31f
 8001066:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001068:	2300      	movs	r3, #0
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
 800106c:	2363      	movs	r3, #99	; 0x63
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
 8001070:	2300      	movs	r3, #0
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
 8001074:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800107e:	f001 f8ff 	bl	8002280 <LL_TIM_Init>
 8001082:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001086:	f7ff fea1 	bl	8000dcc <LL_TIM_DisableARRPreload>
 800108a:	2100      	movs	r1, #0
 800108c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001090:	f7ff ff60 	bl	8000f54 <LL_TIM_SetClockSource>
 8001094:	2101      	movs	r1, #1
 8001096:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109a:	f7ff ff0b 	bl	8000eb4 <LL_TIM_OC_EnablePreload>
 800109e:	2360      	movs	r3, #96	; 0x60
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	461a      	mov	r2, r3
 80010b8:	2101      	movs	r1, #1
 80010ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010be:	f001 f951 	bl	8002364 <LL_TIM_OC_Init>
 80010c2:	2101      	movs	r1, #1
 80010c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010c8:	f7ff fea2 	bl	8000e10 <LL_TIM_OC_DisableFast>
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	461a      	mov	r2, r3
 80010d6:	2110      	movs	r1, #16
 80010d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010dc:	f001 f942 	bl	8002364 <LL_TIM_OC_Init>
 80010e0:	2110      	movs	r1, #16
 80010e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e6:	f7ff fe93 	bl	8000e10 <LL_TIM_OC_DisableFast>
 80010ea:	2100      	movs	r1, #0
 80010ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010f0:	f7ff ff45 	bl	8000f7e <LL_TIM_SetTriggerOutput>
 80010f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010f8:	f7ff ff54 	bl	8000fa4 <LL_TIM_DisableMasterSlaveMode>
 80010fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001100:	f7ff fe54 	bl	8000dac <LL_TIM_EnableCounter>
 8001104:	2101      	movs	r1, #1
 8001106:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800110a:	f7ff fe6f 	bl	8000dec <LL_TIM_CC_EnableChannel>
 800110e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001112:	f7ff ff57 	bl	8000fc4 <LL_TIM_EnableIT_UPDATE>
 8001116:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800111a:	f7ff fe17 	bl	8000d4c <LL_AHB1_GRP1_EnableClock>
 800111e:	2320      	movs	r3, #32
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	2302      	movs	r3, #2
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f000 fdf7 	bl	8001d30 <LL_GPIO_Init>
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <__NVIC_GetPriorityGrouping>:
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	; (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
 8001250:	4313      	orrs	r3, r2
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_DMA_EnableChannel>:
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LL_DMA_EnableChannel+0x3c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	3a01      	subs	r2, #1
 800127e:	4907      	ldr	r1, [pc, #28]	; (800129c <LL_DMA_EnableChannel+0x3c>)
 8001280:	5c8a      	ldrb	r2, [r1, r2]
 8001282:	4611      	mov	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	440a      	add	r2, r1
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	08002da0 	.word	0x08002da0

080012a0 <LL_DMA_DisableChannel>:
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LL_DMA_DisableChannel+0x3c>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	3a01      	subs	r2, #1
 80012be:	4907      	ldr	r1, [pc, #28]	; (80012dc <LL_DMA_DisableChannel+0x3c>)
 80012c0:	5c8a      	ldrb	r2, [r1, r2]
 80012c2:	4611      	mov	r1, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	440a      	add	r2, r1
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	08002da0 	.word	0x08002da0

080012e0 <LL_DMA_SetDataTransferDirection>:
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LL_DMA_SetDataTransferDirection+0x48>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001300:	f023 0310 	bic.w	r3, r3, #16
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	3a01      	subs	r2, #1
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <LL_DMA_SetDataTransferDirection+0x48>)
 800130a:	5c8a      	ldrb	r2, [r1, r2]
 800130c:	4611      	mov	r1, r2
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	440a      	add	r2, r1
 8001312:	4611      	mov	r1, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	08002da0 	.word	0x08002da0

0800132c <LL_DMA_GetDataTransferDirection>:
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <LL_DMA_GetDataTransferDirection+0x2c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f244 0310 	movw	r3, #16400	; 0x4010
 800134a:	4013      	ands	r3, r2
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	08002da0 	.word	0x08002da0

0800135c <LL_DMA_SetMode>:
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LL_DMA_SetMode+0x44>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 0220 	bic.w	r2, r3, #32
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3b01      	subs	r3, #1
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_DMA_SetMode+0x44>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	4619      	mov	r1, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	440b      	add	r3, r1
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	08002da0 	.word	0x08002da0

080013a4 <LL_DMA_SetPeriphIncMode>:
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <LL_DMA_SetPeriphIncMode+0x44>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <LL_DMA_SetPeriphIncMode+0x44>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	4619      	mov	r1, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	440b      	add	r3, r1
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	08002da0 	.word	0x08002da0

080013ec <LL_DMA_SetMemoryIncMode>:
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <LL_DMA_SetMemoryIncMode+0x44>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	461a      	mov	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3b01      	subs	r3, #1
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <LL_DMA_SetMemoryIncMode+0x44>)
 8001412:	5ccb      	ldrb	r3, [r1, r3]
 8001414:	4619      	mov	r1, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	440b      	add	r3, r1
 800141a:	4619      	mov	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	08002da0 	.word	0x08002da0

08001434 <LL_DMA_SetPeriphSize>:
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3b01      	subs	r3, #1
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <LL_DMA_SetPeriphSize+0x44>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <LL_DMA_SetPeriphSize+0x44>)
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	4619      	mov	r1, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	440b      	add	r3, r1
 8001462:	4619      	mov	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	08002da0 	.word	0x08002da0

0800147c <LL_DMA_SetMemorySize>:
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3b01      	subs	r3, #1
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <LL_DMA_SetMemorySize+0x44>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <LL_DMA_SetMemorySize+0x44>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	4619      	mov	r1, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	440b      	add	r3, r1
 80014aa:	4619      	mov	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	08002da0 	.word	0x08002da0

080014c4 <LL_DMA_SetChannelPriorityLevel>:
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	4619      	mov	r1, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	440b      	add	r3, r1
 80014f2:	4619      	mov	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	08002da0 	.word	0x08002da0

0800150c <LL_DMA_SetDataLength>:
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3b01      	subs	r3, #1
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <LL_DMA_SetDataLength+0x44>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	3a01      	subs	r2, #1
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <LL_DMA_SetDataLength+0x44>)
 8001532:	5c8a      	ldrb	r2, [r1, r2]
 8001534:	4611      	mov	r1, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	440a      	add	r2, r1
 800153a:	4611      	mov	r1, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	08002da0 	.word	0x08002da0

08001554 <LL_DMA_GetDataLength>:
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <LL_DMA_GetDataLength+0x28>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	08002da0 	.word	0x08002da0

08001580 <LL_DMA_ConfigAddresses>:
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b10      	cmp	r3, #16
 8001592:	d114      	bne.n	80015be <LL_DMA_ConfigAddresses+0x3e>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3b01      	subs	r3, #1
 8001598:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <LL_DMA_ConfigAddresses+0x74>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60d3      	str	r3, [r2, #12]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <LL_DMA_ConfigAddresses+0x74>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	461a      	mov	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	6093      	str	r3, [r2, #8]
 80015bc:	e013      	b.n	80015e6 <LL_DMA_ConfigAddresses+0x66>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LL_DMA_ConfigAddresses+0x74>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6093      	str	r3, [r2, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <LL_DMA_ConfigAddresses+0x74>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	60d3      	str	r3, [r2, #12]
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08002da0 	.word	0x08002da0

080015f8 <LL_DMA_IsActiveFlag_TC6>:
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_DMA_IsActiveFlag_HT6>:
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_DMA_EnableIT_TC>:
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LL_DMA_EnableIT_TC+0x3c>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	3a01      	subs	r2, #1
 8001666:	4907      	ldr	r1, [pc, #28]	; (8001684 <LL_DMA_EnableIT_TC+0x3c>)
 8001668:	5c8a      	ldrb	r2, [r1, r2]
 800166a:	4611      	mov	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	440a      	add	r2, r1
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	08002da0 	.word	0x08002da0

08001688 <LL_DMA_EnableIT_HT>:
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LL_DMA_EnableIT_HT+0x3c>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	3a01      	subs	r2, #1
 80016a6:	4907      	ldr	r1, [pc, #28]	; (80016c4 <LL_DMA_EnableIT_HT+0x3c>)
 80016a8:	5c8a      	ldrb	r2, [r1, r2]
 80016aa:	4611      	mov	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	440a      	add	r2, r1
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	08002da0 	.word	0x08002da0

080016c8 <LL_AHB1_GRP1_EnableClock>:
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	4907      	ldr	r1, [pc, #28]	; (80016f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	614b      	str	r3, [r1, #20]
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000

080016f8 <LL_APB1_GRP1_EnableClock>:
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	61cb      	str	r3, [r1, #28]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <LL_APB1_GRP1_EnableClock+0x2c>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <LL_USART_Enable>:
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_USART_ConfigAsyncMode>:
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_USART_EnableIT_IDLE>:
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	e853 3f00 	ldrex	r3, [r3]
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	61ba      	str	r2, [r7, #24]
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	e841 2300 	strex	r3, r2, [r1]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e9      	bne.n	800177c <LL_USART_EnableIT_IDLE+0x8>
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_USART_DisableIT_CTS>:
 80017b6:	b480      	push	{r7}
 80017b8:	b089      	sub	sp, #36	; 0x24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3308      	adds	r3, #8
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	e853 3f00 	ldrex	r3, [r3]
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3308      	adds	r3, #8
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	61ba      	str	r2, [r7, #24]
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	6979      	ldr	r1, [r7, #20]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	e841 2300 	strex	r3, r2, [r1]
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1e7      	bne.n	80017be <LL_USART_DisableIT_CTS+0x8>
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	3724      	adds	r7, #36	; 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_USART_EnableDMAReq_RX>:
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3308      	adds	r3, #8
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	e853 3f00 	ldrex	r3, [r3]
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3308      	adds	r3, #8
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	61ba      	str	r2, [r7, #24]
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	6979      	ldr	r1, [r7, #20]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	e841 2300 	strex	r3, r2, [r1]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e7      	bne.n	8001804 <LL_USART_EnableDMAReq_RX+0x8>
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_USART_DMA_GetRegAddr>:
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <LL_USART_DMA_GetRegAddr+0x18>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3328      	adds	r3, #40	; 0x28
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e002      	b.n	8001860 <LL_USART_DMA_GetRegAddr+0x1e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3324      	adds	r3, #36	; 0x24
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <MX_USART2_UART_Init>:
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b090      	sub	sp, #64	; 0x40
 8001874:	af02      	add	r7, sp, #8
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800189e:	f7ff ff2b 	bl	80016f8 <LL_APB1_GRP1_EnableClock>
 80018a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018a6:	f7ff ff0f 	bl	80016c8 <LL_AHB1_GRP1_EnableClock>
 80018aa:	f248 0304 	movw	r3, #32772	; 0x8004
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	2303      	movs	r3, #3
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	2307      	movs	r3, #7
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018cc:	f000 fa30 	bl	8001d30 <LL_GPIO_Init>
 80018d0:	2200      	movs	r2, #0
 80018d2:	2106      	movs	r1, #6
 80018d4:	483f      	ldr	r0, [pc, #252]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 80018d6:	f7ff fd03 	bl	80012e0 <LL_DMA_SetDataTransferDirection>
 80018da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018de:	2106      	movs	r1, #6
 80018e0:	483c      	ldr	r0, [pc, #240]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 80018e2:	f7ff fdef 	bl	80014c4 <LL_DMA_SetChannelPriorityLevel>
 80018e6:	2200      	movs	r2, #0
 80018e8:	2106      	movs	r1, #6
 80018ea:	483a      	ldr	r0, [pc, #232]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 80018ec:	f7ff fd36 	bl	800135c <LL_DMA_SetMode>
 80018f0:	2200      	movs	r2, #0
 80018f2:	2106      	movs	r1, #6
 80018f4:	4837      	ldr	r0, [pc, #220]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 80018f6:	f7ff fd55 	bl	80013a4 <LL_DMA_SetPeriphIncMode>
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	2106      	movs	r1, #6
 80018fe:	4835      	ldr	r0, [pc, #212]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001900:	f7ff fd74 	bl	80013ec <LL_DMA_SetMemoryIncMode>
 8001904:	2200      	movs	r2, #0
 8001906:	2106      	movs	r1, #6
 8001908:	4832      	ldr	r0, [pc, #200]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 800190a:	f7ff fd93 	bl	8001434 <LL_DMA_SetPeriphSize>
 800190e:	2200      	movs	r2, #0
 8001910:	2106      	movs	r1, #6
 8001912:	4830      	ldr	r0, [pc, #192]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001914:	f7ff fdb2 	bl	800147c <LL_DMA_SetMemorySize>
 8001918:	f7ff fc18 	bl	800114c <__NVIC_GetPriorityGrouping>
 800191c:	4603      	mov	r3, r0
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fc68 	bl	80011f8 <NVIC_EncodePriority>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	2026      	movs	r0, #38	; 0x26
 800192e:	f7ff fc39 	bl	80011a4 <__NVIC_SetPriority>
 8001932:	2026      	movs	r0, #38	; 0x26
 8001934:	f7ff fc18 	bl	8001168 <__NVIC_EnableIRQ>
 8001938:	2101      	movs	r1, #1
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 800193c:	f7ff ff81 	bl	8001842 <LL_USART_DMA_GetRegAddr>
 8001940:	4604      	mov	r4, r0
 8001942:	4d26      	ldr	r5, [pc, #152]	; (80019dc <MX_USART2_UART_Init+0x16c>)
 8001944:	2106      	movs	r1, #6
 8001946:	4823      	ldr	r0, [pc, #140]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001948:	f7ff fcf0 	bl	800132c <LL_DMA_GetDataTransferDirection>
 800194c:	4603      	mov	r3, r0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	462b      	mov	r3, r5
 8001952:	4622      	mov	r2, r4
 8001954:	2106      	movs	r1, #6
 8001956:	481f      	ldr	r0, [pc, #124]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001958:	f7ff fe12 	bl	8001580 <LL_DMA_ConfigAddresses>
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	2106      	movs	r1, #6
 8001960:	481c      	ldr	r0, [pc, #112]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001962:	f7ff fdd3 	bl	800150c <LL_DMA_SetDataLength>
 8001966:	2106      	movs	r1, #6
 8001968:	481a      	ldr	r0, [pc, #104]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 800196a:	f7ff fc79 	bl	8001260 <LL_DMA_EnableChannel>
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 8001970:	f7ff ff44 	bl	80017fc <LL_USART_EnableDMAReq_RX>
 8001974:	2106      	movs	r1, #6
 8001976:	4817      	ldr	r0, [pc, #92]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001978:	f7ff fe66 	bl	8001648 <LL_DMA_EnableIT_TC>
 800197c:	2106      	movs	r1, #6
 800197e:	4815      	ldr	r0, [pc, #84]	; (80019d4 <MX_USART2_UART_Init+0x164>)
 8001980:	f7ff fe82 	bl	8001688 <LL_DMA_EnableIT_HT>
 8001984:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	230c      	movs	r3, #12
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019aa:	f001 f843 	bl	8002a34 <LL_USART_Init>
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019b0:	f7ff ff01 	bl	80017b6 <LL_USART_DisableIT_CTS>
 80019b4:	4808      	ldr	r0, [pc, #32]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019b6:	f7ff fec7 	bl	8001748 <LL_USART_ConfigAsyncMode>
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019bc:	f7ff feb4 	bl	8001728 <LL_USART_Enable>
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019c2:	f7ff fed7 	bl	8001774 <LL_USART_EnableIT_IDLE>
 80019c6:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_USART2_UART_Init+0x168>)
 80019c8:	f7ff feae 	bl	8001728 <LL_USART_Enable>
 80019cc:	bf00      	nop
 80019ce:	3738      	adds	r7, #56	; 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40004400 	.word	0x40004400
 80019dc:	200000ec 	.word	0x200000ec

080019e0 <USART2_RegisterCallback>:
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <USART2_RegisterCallback+0x14>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <USART2_RegisterCallback+0x20>)
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	2000008c 	.word	0x2000008c

08001a04 <USART2_CheckDmaReception>:
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <USART2_CheckDmaReception+0xbc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d051      	beq.n	8001ab6 <USART2_CheckDmaReception+0xb2>
 8001a12:	2106      	movs	r1, #6
 8001a14:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a16:	f7ff fd9d 	bl	8001554 <LL_DMA_GetDataLength>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <USART2_CheckDmaReception+0xc4>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	88fa      	ldrh	r2, [r7, #6]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d03b      	beq.n	8001aa6 <USART2_CheckDmaReception+0xa2>
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <USART2_CheckDmaReception+0xc4>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d936      	bls.n	8001aa6 <USART2_CheckDmaReception+0xa2>
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <USART2_CheckDmaReception+0xc4>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	717b      	strb	r3, [r7, #5]
 8001a3e:	e00b      	b.n	8001a58 <USART2_CheckDmaReception+0x54>
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	4a22      	ldr	r2, [pc, #136]	; (8001acc <USART2_CheckDmaReception+0xc8>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	713b      	strb	r3, [r7, #4]
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <USART2_CheckDmaReception+0xbc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	793a      	ldrb	r2, [r7, #4]
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4798      	blx	r3
 8001a52:	797b      	ldrb	r3, [r7, #5]
 8001a54:	3301      	adds	r3, #1
 8001a56:	717b      	strb	r3, [r7, #5]
 8001a58:	797b      	ldrb	r3, [r7, #5]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d8ee      	bhi.n	8001a40 <USART2_CheckDmaReception+0x3c>
 8001a62:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a64:	f7ff fddc 	bl	8001620 <LL_DMA_IsActiveFlag_HT6>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <USART2_CheckDmaReception+0x76>
 8001a6e:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a70:	f7ff fdc2 	bl	80015f8 <LL_DMA_IsActiveFlag_TC6>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d115      	bne.n	8001aa6 <USART2_CheckDmaReception+0xa2>
 8001a7a:	2106      	movs	r1, #6
 8001a7c:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a7e:	f7ff fc0f 	bl	80012a0 <LL_DMA_DisableChannel>
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	2106      	movs	r1, #6
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a88:	f7ff fd40 	bl	800150c <LL_DMA_SetDataLength>
 8001a8c:	2106      	movs	r1, #6
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a90:	f7ff fbe6 	bl	8001260 <LL_DMA_EnableChannel>
 8001a94:	2106      	movs	r1, #6
 8001a96:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <USART2_CheckDmaReception+0xc0>)
 8001a98:	f7ff fd5c 	bl	8001554 <LL_DMA_GetDataLength>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001aa4:	80fb      	strh	r3, [r7, #6]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <USART2_CheckDmaReception+0xc4>)
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	8013      	strh	r3, [r2, #0]
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <USART2_CheckDmaReception+0xc4>)
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <USART2_CheckDmaReception+0xcc>)
 8001ab2:	805a      	strh	r2, [r3, #2]
 8001ab4:	e000      	b.n	8001ab8 <USART2_CheckDmaReception+0xb4>
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000008c 	.word	0x2000008c
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	20000090 	.word	0x20000090
 8001acc:	200000ec 	.word	0x200000ec
 8001ad0:	2000009c 	.word	0x2000009c

08001ad4 <Reset_Handler>:
 8001ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b0c <LoopForever+0x2>
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LoopForever+0x6>)
 8001ada:	490e      	ldr	r1, [pc, #56]	; (8001b14 <LoopForever+0xa>)
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <LoopForever+0xe>)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:
 8001ae2:	58d4      	ldr	r4, [r2, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:
 8001ae8:	18c4      	adds	r4, r0, r3
 8001aea:	428c      	cmp	r4, r1
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <LoopForever+0x12>)
 8001af0:	4c0b      	ldr	r4, [pc, #44]	; (8001b20 <LoopForever+0x16>)
 8001af2:	2300      	movs	r3, #0
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:
 8001afa:	42a2      	cmp	r2, r4
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>
 8001afe:	f7ff f889 	bl	8000c14 <SystemInit>
 8001b02:	f001 f845 	bl	8002b90 <__libc_init_array>
 8001b06:	f7fe fd57 	bl	80005b8 <main>

08001b0a <LoopForever>:
 8001b0a:	e7fe      	b.n	8001b0a <LoopForever>
 8001b0c:	20003000 	.word	0x20003000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000068 	.word	0x20000068
 8001b18:	08002eb0 	.word	0x08002eb0
 8001b1c:	20000068 	.word	0x20000068
 8001b20:	2000016c 	.word	0x2000016c

08001b24 <ADC1_2_IRQHandler>:
 8001b24:	e7fe      	b.n	8001b24 <ADC1_2_IRQHandler>

08001b26 <LL_GPIO_SetPinMode>:
 8001b26:	b480      	push	{r7}
 8001b28:	b089      	sub	sp, #36	; 0x24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	bf00      	nop
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_GPIO_SetPinOutputType>:
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_GPIO_SetPinSpeed>:
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2103      	movs	r1, #3
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	401a      	ands	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_GPIO_SetPinPull>:
 8001c12:	b480      	push	{r7}
 8001c14:	b089      	sub	sp, #36	; 0x24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2103      	movs	r1, #3
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	401a      	ands	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	bf00      	nop
 8001c66:	3724      	adds	r7, #36	; 0x24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_GPIO_SetAFPin_0_7>:
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	210f      	movs	r1, #15
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	621a      	str	r2, [r3, #32]
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_GPIO_SetAFPin_8_15>:
 8001cce:	b480      	push	{r7}
 8001cd0:	b089      	sub	sp, #36	; 0x24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
 8001d24:	bf00      	nop
 8001d26:	3724      	adds	r7, #36	; 0x24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_GPIO_Init>:
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e051      	b.n	8001df8 <LL_GPIO_Init+0xc8>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d043      	beq.n	8001df2 <LL_GPIO_Init+0xc2>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d003      	beq.n	8001d7a <LL_GPIO_Init+0x4a>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d10e      	bne.n	8001d98 <LL_GPIO_Init+0x68>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	69b9      	ldr	r1, [r7, #24]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff16 	bl	8001bb4 <LL_GPIO_SetPinSpeed>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	461a      	mov	r2, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fef6 	bl	8001b84 <LL_GPIO_SetPinOutputType>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff36 	bl	8001c12 <LL_GPIO_SetPinPull>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d11a      	bne.n	8001de4 <LL_GPIO_Init+0xb4>
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b07      	cmp	r3, #7
 8001dc4:	d807      	bhi.n	8001dd6 <LL_GPIO_Init+0xa6>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff4e 	bl	8001c70 <LL_GPIO_SetAFPin_0_7>
 8001dd4:	e006      	b.n	8001de4 <LL_GPIO_Init+0xb4>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff75 	bl	8001cce <LL_GPIO_SetAFPin_8_15>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	461a      	mov	r2, r3
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fe9a 	bl	8001b26 <LL_GPIO_SetPinMode>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1a6      	bne.n	8001d54 <LL_GPIO_Init+0x24>
 8001e06:	2300      	movs	r3, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LL_RCC_HSI_IsReady>:
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <LL_RCC_HSI_IsReady+0x20>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_LSE_IsReady>:
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <LL_RCC_LSE_IsReady+0x20>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000

08001e58 <LL_RCC_GetSysClkSource>:
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <LL_RCC_GetSysClkSource+0x18>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000

08001e74 <LL_RCC_GetAHBPrescaler>:
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <LL_RCC_GetAHBPrescaler+0x18>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000

08001e90 <LL_RCC_GetAPB1Prescaler>:
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <LL_RCC_GetAPB2Prescaler>:
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <LL_RCC_GetUSARTClockSource>:
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <LL_RCC_GetUSARTClockSource+0x28>)
 8001ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <LL_RCC_PLL_GetMainSource>:
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <LL_RCC_PLL_GetMainSource+0x18>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000

08001f10 <LL_RCC_PLL_GetMultiplicator>:
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000

08001f2c <LL_RCC_PLL_GetPrediv>:
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <LL_RCC_PLL_GetPrediv+0x18>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <LL_RCC_GetSystemClocksFreq>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	f000 f864 	bl	800201c <RCC_GetSystemClockFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f882 	bl	8002068 <RCC_GetHCLKClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f890 	bl	8002094 <RCC_GetPCLK1ClockFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f89c 	bl	80020bc <RCC_GetPCLK2ClockFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <LL_RCC_GetUSARTClockFreq>:
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d12d      	bne.n	8002002 <LL_RCC_GetUSARTClockFreq+0x6e>
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <LL_RCC_GetUSARTClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d00a      	beq.n	8001fc8 <LL_RCC_GetUSARTClockFreq+0x34>
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d819      	bhi.n	8001fea <LL_RCC_GetUSARTClockFreq+0x56>
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d00c      	beq.n	8001fd8 <LL_RCC_GetUSARTClockFreq+0x44>
 8001fbe:	e014      	b.n	8001fea <LL_RCC_GetUSARTClockFreq+0x56>
 8001fc0:	f000 f82c 	bl	800201c <RCC_GetSystemClockFreq>
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	e021      	b.n	800200c <LL_RCC_GetUSARTClockFreq+0x78>
 8001fc8:	f7ff ff22 	bl	8001e10 <LL_RCC_HSI_IsReady>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <LL_RCC_GetUSARTClockFreq+0x72>
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e016      	b.n	8002006 <LL_RCC_GetUSARTClockFreq+0x72>
 8001fd8:	f7ff ff2c 	bl	8001e34 <LL_RCC_LSE_IsReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d013      	beq.n	800200a <LL_RCC_GetUSARTClockFreq+0x76>
 8001fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e00f      	b.n	800200a <LL_RCC_GetUSARTClockFreq+0x76>
 8001fea:	f000 f817 	bl	800201c <RCC_GetSystemClockFreq>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f839 	bl	8002068 <RCC_GetHCLKClockFreq>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f84b 	bl	8002094 <RCC_GetPCLK1ClockFreq>
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	e004      	b.n	800200c <LL_RCC_GetUSARTClockFreq+0x78>
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <LL_RCC_GetUSARTClockFreq+0x78>
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <LL_RCC_GetUSARTClockFreq+0x78>
 800200a:	bf00      	nop
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	007a1200 	.word	0x007a1200

0800201c <RCC_GetSystemClockFreq>:
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f7ff ff17 	bl	8001e58 <LL_RCC_GetSysClkSource>
 800202a:	4603      	mov	r3, r0
 800202c:	2b08      	cmp	r3, #8
 800202e:	d00c      	beq.n	800204a <RCC_GetSystemClockFreq+0x2e>
 8002030:	2b08      	cmp	r3, #8
 8002032:	d80e      	bhi.n	8002052 <RCC_GetSystemClockFreq+0x36>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <RCC_GetSystemClockFreq+0x22>
 8002038:	2b04      	cmp	r3, #4
 800203a:	d003      	beq.n	8002044 <RCC_GetSystemClockFreq+0x28>
 800203c:	e009      	b.n	8002052 <RCC_GetSystemClockFreq+0x36>
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <RCC_GetSystemClockFreq+0x48>)
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e009      	b.n	8002058 <RCC_GetSystemClockFreq+0x3c>
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <RCC_GetSystemClockFreq+0x48>)
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	e006      	b.n	8002058 <RCC_GetSystemClockFreq+0x3c>
 800204a:	f000 f84b 	bl	80020e4 <RCC_PLL_GetFreqDomain_SYS>
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	e002      	b.n	8002058 <RCC_GetSystemClockFreq+0x3c>
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <RCC_GetSystemClockFreq+0x48>)
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	bf00      	nop
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	007a1200 	.word	0x007a1200

08002068 <RCC_GetHCLKClockFreq>:
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	f7ff ff00 	bl	8001e74 <LL_RCC_GetAHBPrescaler>
 8002074:	4603      	mov	r3, r0
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <RCC_GetHCLKClockFreq+0x28>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	461a      	mov	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	40d3      	lsrs	r3, r2
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	08002d70 	.word	0x08002d70

08002094 <RCC_GetPCLK1ClockFreq>:
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	f7ff fef8 	bl	8001e90 <LL_RCC_GetAPB1Prescaler>
 80020a0:	4603      	mov	r3, r0
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	08002d80 	.word	0x08002d80

080020bc <RCC_GetPCLK2ClockFreq>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	f7ff fef2 	bl	8001eac <LL_RCC_GetAPB2Prescaler>
 80020c8:	4603      	mov	r3, r0
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	08002d80 	.word	0x08002d80

080020e4 <RCC_PLL_GetFreqDomain_SYS>:
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	f7ff feff 	bl	8001ef4 <LL_RCC_PLL_GetMainSource>
 80020f6:	60b8      	str	r0, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d003      	beq.n	800210e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002106:	e005      	b.n	8002114 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e005      	b.n	800211a <RCC_PLL_GetFreqDomain_SYS+0x36>
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <RCC_PLL_GetFreqDomain_SYS+0x36>
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	bf00      	nop
 800211a:	f7ff ff07 	bl	8001f2c <LL_RCC_PLL_GetPrediv>
 800211e:	4603      	mov	r3, r0
 8002120:	3301      	adds	r3, #1
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	fbb2 f4f3 	udiv	r4, r2, r3
 8002128:	f7ff fef2 	bl	8001f10 <LL_RCC_PLL_GetMultiplicator>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002132:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	603a      	str	r2, [r7, #0]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	fab2 f282 	clz	r2, r2
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	40d3      	lsrs	r3, r2
 800214a:	3302      	adds	r3, #2
 800214c:	fb03 f304 	mul.w	r3, r3, r4
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	003d0900 	.word	0x003d0900
 800215c:	007a1200 	.word	0x007a1200

08002160 <LL_TIM_SetPrescaler>:
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_TIM_SetAutoReload>:
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_TIM_SetRepetitionCounter>:
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_TIM_OC_SetCompareCH1>:
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_TIM_OC_SetCompareCH2>:
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_TIM_OC_SetCompareCH3>:
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_TIM_OC_SetCompareCH4>:
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_TIM_OC_SetCompareCH5>:
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	659a      	str	r2, [r3, #88]	; 0x58
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_TIM_OC_SetCompareCH6>:
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_TIM_GenerateEvent_UPDATE>:
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	615a      	str	r2, [r3, #20]
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_TIM_Init>:
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <LL_TIM_Init+0xd0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <LL_TIM_Init+0x28>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d003      	beq.n	80022a8 <LL_TIM_Init+0x28>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <LL_TIM_Init+0xd4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d106      	bne.n	80022b6 <LL_TIM_Init+0x36>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a25      	ldr	r2, [pc, #148]	; (8002350 <LL_TIM_Init+0xd0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <LL_TIM_Init+0x66>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d00f      	beq.n	80022e6 <LL_TIM_Init+0x66>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <LL_TIM_Init+0xd4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00b      	beq.n	80022e6 <LL_TIM_Init+0x66>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a21      	ldr	r2, [pc, #132]	; (8002358 <LL_TIM_Init+0xd8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <LL_TIM_Init+0x66>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <LL_TIM_Init+0xdc>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d003      	beq.n	80022e6 <LL_TIM_Init+0x66>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <LL_TIM_Init+0xe0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d106      	bne.n	80022f4 <LL_TIM_Init+0x74>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4619      	mov	r1, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff3b 	bl	800217c <LL_TIM_SetAutoReload>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff27 	bl	8002160 <LL_TIM_SetPrescaler>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <LL_TIM_Init+0xd0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00b      	beq.n	8002332 <LL_TIM_Init+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <LL_TIM_Init+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <LL_TIM_Init+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <LL_TIM_Init+0xdc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <LL_TIM_Init+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <LL_TIM_Init+0xe0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d105      	bne.n	800233e <LL_TIM_Init+0xbe>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff2d 	bl	8002198 <LL_TIM_SetRepetitionCounter>
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff8e 	bl	8002260 <LL_TIM_GenerateEvent_UPDATE>
 8002344:	2300      	movs	r3, #0
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40000400 	.word	0x40000400
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800

08002364 <LL_TIM_OC_Init>:
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800237a:	d045      	beq.n	8002408 <LL_TIM_OC_Init+0xa4>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002382:	d848      	bhi.n	8002416 <LL_TIM_OC_Init+0xb2>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d036      	beq.n	80023fa <LL_TIM_OC_Init+0x96>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002392:	d840      	bhi.n	8002416 <LL_TIM_OC_Init+0xb2>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d027      	beq.n	80023ec <LL_TIM_OC_Init+0x88>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d838      	bhi.n	8002416 <LL_TIM_OC_Init+0xb2>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	d018      	beq.n	80023de <LL_TIM_OC_Init+0x7a>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b2:	d830      	bhi.n	8002416 <LL_TIM_OC_Init+0xb2>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d003      	beq.n	80023c2 <LL_TIM_OC_Init+0x5e>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d007      	beq.n	80023d0 <LL_TIM_OC_Init+0x6c>
 80023c0:	e029      	b.n	8002416 <LL_TIM_OC_Init+0xb2>
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f82d 	bl	8002424 <OC1Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
 80023ce:	e023      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8a0 	bl	8002518 <OC2Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	75fb      	strb	r3, [r7, #23]
 80023dc:	e01c      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f917 	bl	8002614 <OC3Config>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]
 80023ea:	e015      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f98e 	bl	8002710 <OC4Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	75fb      	strb	r3, [r7, #23]
 80023f8:	e00e      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f9ed 	bl	80027dc <OC5Config>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]
 8002406:	e007      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fa44 	bl	8002898 <OC6Config>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	e000      	b.n	8002418 <LL_TIM_OC_Init+0xb4>
 8002416:	bf00      	nop
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <OC1Config>:
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f023 0201 	bic.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 0202 	bic.w	r2, r3, #2
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0201 	bic.w	r2, r3, #1
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <OC1Config+0xe4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00b      	beq.n	80024a2 <OC1Config+0x7e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1f      	ldr	r2, [pc, #124]	; (800250c <OC1Config+0xe8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <OC1Config+0x7e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <OC1Config+0xec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <OC1Config+0x7e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <OC1Config+0xf0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d11e      	bne.n	80024e0 <OC1Config+0xbc>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f023 0208 	bic.w	r2, r3, #8
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 0204 	bic.w	r2, r3, #4
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	619a      	str	r2, [r3, #24]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fe5e 	bl	80021b4 <LL_TIM_OC_SetCompareCH1>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	621a      	str	r2, [r3, #32]
 80024fe:	2300      	movs	r3, #0
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40014000 	.word	0x40014000
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800

08002518 <OC2Config>:
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0210 	bic.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	621a      	str	r2, [r3, #32]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	0212      	lsls	r2, r2, #8
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0220 	bic.w	r2, r3, #32
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f023 0210 	bic.w	r2, r3, #16
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a21      	ldr	r2, [pc, #132]	; (8002604 <OC2Config+0xec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <OC2Config+0x84>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a20      	ldr	r2, [pc, #128]	; (8002608 <OC2Config+0xf0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <OC2Config+0x84>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <OC2Config+0xf4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <OC2Config+0x84>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <OC2Config+0xf8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d11f      	bne.n	80025dc <OC2Config+0xc4>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	019b      	lsls	r3, r3, #6
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	619a      	str	r2, [r3, #24]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fdee 	bl	80021d0 <LL_TIM_OC_SetCompareCH2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
 80025fa:	2300      	movs	r3, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40014000 	.word	0x40014000
 800260c:	40014400 	.word	0x40014400
 8002610:	40014800 	.word	0x40014800

08002614 <OC3Config>:
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a21      	ldr	r2, [pc, #132]	; (8002700 <OC3Config+0xec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00b      	beq.n	8002696 <OC3Config+0x82>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a20      	ldr	r2, [pc, #128]	; (8002704 <OC3Config+0xf0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <OC3Config+0x82>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <OC3Config+0xf4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <OC3Config+0x82>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <OC3Config+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d11f      	bne.n	80026d6 <OC3Config+0xc2>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fd7f 	bl	80021ec <LL_TIM_OC_SetCompareCH3>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	2300      	movs	r3, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <OC4Config>:
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	621a      	str	r2, [r3, #32]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	0212      	lsls	r2, r2, #8
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	031b      	lsls	r3, r3, #12
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	031b      	lsls	r3, r3, #12
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <OC4Config+0xbc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <OC4Config+0x84>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <OC4Config+0xc0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <OC4Config+0x84>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <OC4Config+0xc4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <OC4Config+0x84>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <OC4Config+0xc8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d107      	bne.n	80027a4 <OC4Config+0x94>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	019b      	lsls	r3, r3, #6
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	61da      	str	r2, [r3, #28]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fd26 	bl	8002208 <LL_TIM_OC_SetCompareCH4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	621a      	str	r2, [r3, #32]
 80027c2:	2300      	movs	r3, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800

080027dc <OC5Config>:
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <OC5Config+0xac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00b      	beq.n	8002850 <OC5Config+0x74>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a14      	ldr	r2, [pc, #80]	; (800288c <OC5Config+0xb0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <OC5Config+0x74>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <OC5Config+0xb4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <OC5Config+0x74>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <OC5Config+0xb8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d109      	bne.n	8002864 <OC5Config+0x88>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fcd7 	bl	8002224 <LL_TIM_OC_SetCompareCH5>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	621a      	str	r2, [r3, #32]
 800287c:	2300      	movs	r3, #0
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <OC6Config>:
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	0212      	lsls	r2, r2, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	051b      	lsls	r3, r3, #20
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <OC6Config+0xac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <OC6Config+0x76>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <OC6Config+0xb0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <OC6Config+0x76>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <OC6Config+0xb4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <OC6Config+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a11      	ldr	r2, [pc, #68]	; (8002950 <OC6Config+0xb8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d109      	bne.n	8002922 <OC6Config+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fc88 	bl	8002244 <LL_TIM_OC_SetCompareCH6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
 800293a:	2300      	movs	r3, #0
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800

08002954 <LL_USART_IsEnabled>:
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_USART_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_USART_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_USART_SetStopBitsLength>:
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_USART_SetHWFlowCtrl>:
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_USART_SetBaudRate>:
 80029c6:	b480      	push	{r7}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029da:	d11a      	bne.n	8002a12 <LL_USART_SetBaudRate+0x4c>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	005a      	lsls	r2, r3, #1
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	441a      	add	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e00a      	b.n	8002a28 <LL_USART_SetBaudRate+0x62>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	085a      	lsrs	r2, r3, #1
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	441a      	add	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	bf00      	nop
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_USART_Init>:
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	2301      	movs	r3, #1
 8002a40:	77fb      	strb	r3, [r7, #31]
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff84 	bl	8002954 <LL_USART_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d14e      	bne.n	8002af0 <LL_USART_Init+0xbc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <LL_USART_Init+0xc8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	6851      	ldr	r1, [r2, #4]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	4311      	orrs	r1, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	6912      	ldr	r2, [r2, #16]
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	6992      	ldr	r2, [r2, #24]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff7c 	bl	800297a <LL_USART_SetStopBitsLength>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff89 	bl	80029a0 <LL_USART_SetHWFlowCtrl>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <LL_USART_Init+0xcc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d104      	bne.n	8002aa0 <LL_USART_Init+0x6c>
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7ff fa7c 	bl	8001f94 <LL_RCC_GetUSARTClockFreq>
 8002a9c:	61b8      	str	r0, [r7, #24]
 8002a9e:	e016      	b.n	8002ace <LL_USART_Init+0x9a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <LL_USART_Init+0xd0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d107      	bne.n	8002ab8 <LL_USART_Init+0x84>
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa4b 	bl	8001f48 <LL_RCC_GetSystemClocksFreq>
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e00a      	b.n	8002ace <LL_USART_Init+0x9a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <LL_USART_Init+0xd4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d106      	bne.n	8002ace <LL_USART_Init+0x9a>
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fa3f 	bl	8001f48 <LL_RCC_GetSystemClocksFreq>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <LL_USART_Init+0xbc>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <LL_USART_Init+0xbc>
 8002adc:	2300      	movs	r3, #0
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff6b 	bl	80029c6 <LL_USART_SetBaudRate>
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	efff69f3 	.word	0xefff69f3
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40004400 	.word	0x40004400
 8002b08:	40004800 	.word	0x40004800

08002b0c <LL_InitTick>:
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <LL_InitTick+0x30>)
 8002b20:	3b01      	subs	r3, #1
 8002b22:	6053      	str	r3, [r2, #4]
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <LL_InitTick+0x30>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <LL_InitTick+0x30>)
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <LL_Init1msTick>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ffdd 	bl	8002b0c <LL_InitTick>
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <LL_SetSystemCoreClock>:
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <LL_SetSystemCoreClock+0x1c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <atoi>:
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f000 b8d6 	b.w	8002d30 <strtol>

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000004 	.word	0x20000004

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4d0d      	ldr	r5, [pc, #52]	; (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4d0b      	ldr	r5, [pc, #44]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	; (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f000 f8ce 	bl	8002d44 <_init>
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2600      	movs	r6, #0
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	08002ea8 	.word	0x08002ea8
 8002bcc:	08002ea8 	.word	0x08002ea8
 8002bd0:	08002ea8 	.word	0x08002ea8
 8002bd4:	08002eac 	.word	0x08002eac

08002bd8 <memset>:
 8002bd8:	4402      	add	r2, r0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d100      	bne.n	8002be2 <memset+0xa>
 8002be0:	4770      	bx	lr
 8002be2:	f803 1b01 	strb.w	r1, [r3], #1
 8002be6:	e7f9      	b.n	8002bdc <memset+0x4>

08002be8 <strcpy>:
 8002be8:	4603      	mov	r3, r0
 8002bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bee:	f803 2b01 	strb.w	r2, [r3], #1
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d1f9      	bne.n	8002bea <strcpy+0x2>
 8002bf6:	4770      	bx	lr

08002bf8 <strstr>:
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	780c      	ldrb	r4, [r1, #0]
 8002bfc:	b164      	cbz	r4, 8002c18 <strstr+0x20>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	1c5e      	adds	r6, r3, #1
 8002c06:	b90a      	cbnz	r2, 8002c0c <strstr+0x14>
 8002c08:	4610      	mov	r0, r2
 8002c0a:	e005      	b.n	8002c18 <strstr+0x20>
 8002c0c:	4294      	cmp	r4, r2
 8002c0e:	d108      	bne.n	8002c22 <strstr+0x2a>
 8002c10:	460d      	mov	r5, r1
 8002c12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002c16:	b902      	cbnz	r2, 8002c1a <strstr+0x22>
 8002c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c1a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	d0f7      	beq.n	8002c12 <strstr+0x1a>
 8002c22:	4633      	mov	r3, r6
 8002c24:	e7ec      	b.n	8002c00 <strstr+0x8>
	...

08002c28 <_strtol_l.isra.0>:
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c2e:	d001      	beq.n	8002c34 <_strtol_l.isra.0+0xc>
 8002c30:	2b24      	cmp	r3, #36	; 0x24
 8002c32:	d906      	bls.n	8002c42 <_strtol_l.isra.0+0x1a>
 8002c34:	f7ff ffa6 	bl	8002b84 <__errno>
 8002c38:	2316      	movs	r3, #22
 8002c3a:	6003      	str	r3, [r0, #0]
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c42:	4f3a      	ldr	r7, [pc, #232]	; (8002d2c <_strtol_l.isra.0+0x104>)
 8002c44:	468e      	mov	lr, r1
 8002c46:	4676      	mov	r6, lr
 8002c48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c4c:	5de5      	ldrb	r5, [r4, r7]
 8002c4e:	f015 0508 	ands.w	r5, r5, #8
 8002c52:	d1f8      	bne.n	8002c46 <_strtol_l.isra.0+0x1e>
 8002c54:	2c2d      	cmp	r4, #45	; 0x2d
 8002c56:	d134      	bne.n	8002cc2 <_strtol_l.isra.0+0x9a>
 8002c58:	f89e 4000 	ldrb.w	r4, [lr]
 8002c5c:	f04f 0801 	mov.w	r8, #1
 8002c60:	f106 0e02 	add.w	lr, r6, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05c      	beq.n	8002d22 <_strtol_l.isra.0+0xfa>
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d10c      	bne.n	8002c86 <_strtol_l.isra.0+0x5e>
 8002c6c:	2c30      	cmp	r4, #48	; 0x30
 8002c6e:	d10a      	bne.n	8002c86 <_strtol_l.isra.0+0x5e>
 8002c70:	f89e 4000 	ldrb.w	r4, [lr]
 8002c74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002c78:	2c58      	cmp	r4, #88	; 0x58
 8002c7a:	d14d      	bne.n	8002d18 <_strtol_l.isra.0+0xf0>
 8002c7c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002c80:	2310      	movs	r3, #16
 8002c82:	f10e 0e02 	add.w	lr, lr, #2
 8002c86:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002c8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002c8e:	2600      	movs	r6, #0
 8002c90:	fbbc f9f3 	udiv	r9, ip, r3
 8002c94:	4635      	mov	r5, r6
 8002c96:	fb03 ca19 	mls	sl, r3, r9, ip
 8002c9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002c9e:	2f09      	cmp	r7, #9
 8002ca0:	d818      	bhi.n	8002cd4 <_strtol_l.isra.0+0xac>
 8002ca2:	463c      	mov	r4, r7
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	dd24      	ble.n	8002cf2 <_strtol_l.isra.0+0xca>
 8002ca8:	2e00      	cmp	r6, #0
 8002caa:	db1f      	blt.n	8002cec <_strtol_l.isra.0+0xc4>
 8002cac:	45a9      	cmp	r9, r5
 8002cae:	d31d      	bcc.n	8002cec <_strtol_l.isra.0+0xc4>
 8002cb0:	d101      	bne.n	8002cb6 <_strtol_l.isra.0+0x8e>
 8002cb2:	45a2      	cmp	sl, r4
 8002cb4:	db1a      	blt.n	8002cec <_strtol_l.isra.0+0xc4>
 8002cb6:	fb05 4503 	mla	r5, r5, r3, r4
 8002cba:	2601      	movs	r6, #1
 8002cbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002cc0:	e7eb      	b.n	8002c9a <_strtol_l.isra.0+0x72>
 8002cc2:	2c2b      	cmp	r4, #43	; 0x2b
 8002cc4:	bf08      	it	eq
 8002cc6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002cca:	46a8      	mov	r8, r5
 8002ccc:	bf08      	it	eq
 8002cce:	f106 0e02 	addeq.w	lr, r6, #2
 8002cd2:	e7c7      	b.n	8002c64 <_strtol_l.isra.0+0x3c>
 8002cd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002cd8:	2f19      	cmp	r7, #25
 8002cda:	d801      	bhi.n	8002ce0 <_strtol_l.isra.0+0xb8>
 8002cdc:	3c37      	subs	r4, #55	; 0x37
 8002cde:	e7e1      	b.n	8002ca4 <_strtol_l.isra.0+0x7c>
 8002ce0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002ce4:	2f19      	cmp	r7, #25
 8002ce6:	d804      	bhi.n	8002cf2 <_strtol_l.isra.0+0xca>
 8002ce8:	3c57      	subs	r4, #87	; 0x57
 8002cea:	e7db      	b.n	8002ca4 <_strtol_l.isra.0+0x7c>
 8002cec:	f04f 36ff 	mov.w	r6, #4294967295
 8002cf0:	e7e4      	b.n	8002cbc <_strtol_l.isra.0+0x94>
 8002cf2:	2e00      	cmp	r6, #0
 8002cf4:	da05      	bge.n	8002d02 <_strtol_l.isra.0+0xda>
 8002cf6:	2322      	movs	r3, #34	; 0x22
 8002cf8:	6003      	str	r3, [r0, #0]
 8002cfa:	4665      	mov	r5, ip
 8002cfc:	b942      	cbnz	r2, 8002d10 <_strtol_l.isra.0+0xe8>
 8002cfe:	4628      	mov	r0, r5
 8002d00:	e79d      	b.n	8002c3e <_strtol_l.isra.0+0x16>
 8002d02:	f1b8 0f00 	cmp.w	r8, #0
 8002d06:	d000      	beq.n	8002d0a <_strtol_l.isra.0+0xe2>
 8002d08:	426d      	negs	r5, r5
 8002d0a:	2a00      	cmp	r2, #0
 8002d0c:	d0f7      	beq.n	8002cfe <_strtol_l.isra.0+0xd6>
 8002d0e:	b10e      	cbz	r6, 8002d14 <_strtol_l.isra.0+0xec>
 8002d10:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	e7f2      	b.n	8002cfe <_strtol_l.isra.0+0xd6>
 8002d18:	2430      	movs	r4, #48	; 0x30
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1b3      	bne.n	8002c86 <_strtol_l.isra.0+0x5e>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	e7b1      	b.n	8002c86 <_strtol_l.isra.0+0x5e>
 8002d22:	2c30      	cmp	r4, #48	; 0x30
 8002d24:	d0a4      	beq.n	8002c70 <_strtol_l.isra.0+0x48>
 8002d26:	230a      	movs	r3, #10
 8002d28:	e7ad      	b.n	8002c86 <_strtol_l.isra.0+0x5e>
 8002d2a:	bf00      	nop
 8002d2c:	08002da8 	.word	0x08002da8

08002d30 <strtol>:
 8002d30:	4613      	mov	r3, r2
 8002d32:	460a      	mov	r2, r1
 8002d34:	4601      	mov	r1, r0
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <strtol+0x10>)
 8002d38:	6800      	ldr	r0, [r0, #0]
 8002d3a:	f7ff bf75 	b.w	8002c28 <_strtol_l.isra.0>
 8002d3e:	bf00      	nop
 8002d40:	20000004 	.word	0x20000004

08002d44 <_init>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	bf00      	nop
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr

08002d50 <_fini>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	bf00      	nop
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr
