
vrs_cvicenie_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002178  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002338  08002338  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002338  08002338  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002338  08002338  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006734  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001786  00000000  00000000  00026768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  00027ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  00028648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001644c  00000000  00000000  00028cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005d96  00000000  00000000  0003f124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075766  00000000  00000000  00044eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ba620  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cf8  00000000  00000000  000ba674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022e8 	.word	0x080022e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080022e8 	.word	0x080022e8

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <LL_AHB1_GRP1_EnableClock>:
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	4907      	ldr	r1, [pc, #28]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4313      	orrs	r3, r2
 800034e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000370:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000374:	f7ff ffe2 	bl	800033c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000378:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800037c:	f7ff ffde 	bl	800033c <LL_AHB1_GRP1_EnableClock>

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <__NVIC_SetPriorityGrouping>:
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003b6:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <__NVIC_SetPriorityGrouping+0x44>)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	60d3      	str	r3, [r2, #12]
}
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <LL_RCC_HSI_Enable+0x1c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_HSI_IsReady+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	bf0c      	ite	eq
 80003fc:	2301      	moveq	r3, #1
 80003fe:	2300      	movne	r3, #0
 8000400:	b2db      	uxtb	r3, r3
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	4904      	ldr	r1, [pc, #16]	; (8000438 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000426:	4313      	orrs	r3, r2
 8000428:	600b      	str	r3, [r1, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000

0800043c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f023 0203 	bic.w	r2, r3, #3
 800044c:	4904      	ldr	r1, [pc, #16]	; (8000460 <LL_RCC_SetSysClkSource+0x24>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	604b      	str	r3, [r1, #4]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <LL_RCC_GetSysClkSource+0x18>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f003 030c 	and.w	r3, r3, #12
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000490:	4904      	ldr	r1, [pc, #16]	; (80004a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80004b8:	4904      	ldr	r1, [pc, #16]	; (80004cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	604b      	str	r3, [r1, #4]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004e0:	4904      	ldr	r1, [pc, #16]	; (80004f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LL_APB1_GRP1_EnableClock+0x2c>)
 800050e:	69da      	ldr	r2, [r3, #28]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000532:	699a      	ldr	r2, [r3, #24]
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <LL_APB2_GRP1_EnableClock+0x2c>)
 800053e:	699a      	ldr	r2, [r3, #24]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000546:	68fb      	ldr	r3, [r7, #12]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_FLASH_SetLatency+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_FLASH_SetLatency+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40022000 	.word	0x40022000

08000580 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <LL_FLASH_GetLatency+0x18>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f003 0307 	and.w	r3, r3, #7
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PWM_Value = 0;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0x38>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffbe 	bl	8000528 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80005ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005b0:	f7ff ffa2 	bl	80004f8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f7ff fee5 	bl	8000384 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f80d 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f7ff fed5 	bl	800036c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f7ff fea3 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 fd85 	bl	80010d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005ca:	f000 faa5 	bl	8000b18 <MX_TIM2_Init>
  MX_TIM6_Init();
 80005ce:	f000 fb3f 	bl	8000c50 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x36>
 80005d4:	20000020 	.word	0x20000020

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ffbb 	bl	8000558 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffcc 	bl	8000580 <LL_FLASH_GetLatency>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1fa      	bne.n	80005e4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80005ee:	f7ff feed 	bl	80003cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005f2:	bf00      	nop
 80005f4:	f7ff fefa 	bl	80003ec <LL_RCC_HSI_IsReady>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1fa      	bne.n	80005f4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80005fe:	2010      	movs	r0, #16
 8000600:	f7ff ff06 	bl	8000410 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff3b 	bl	8000480 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff4c 	bl	80004a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ff5d 	bl	80004d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff10 	bl	800043c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800061c:	bf00      	nop
 800061e:	f7ff ff21 	bl	8000464 <LL_RCC_GetSysClkSource>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1fa      	bne.n	800061e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <SystemClock_Config+0x60>)
 800062a:	f001 fe13 	bl	8002254 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800062e:	4802      	ldr	r0, [pc, #8]	; (8000638 <SystemClock_Config+0x60>)
 8000630:	f001 fe1e 	bl	8002270 <LL_SetSystemCoreClock>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	007a1200 	.word	0x007a1200

0800063c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f06f 0201 	mvn.w	r2, #1
 800064a:	611a      	str	r2, [r3, #16]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b01      	cmp	r3, #1
 800066a:	d101      	bne.n	8000670 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800066c:	2301      	movs	r3, #1
 800066e:	e000      	b.n	8000672 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000682:	e7fe      	b.n	8000682 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000688:	e7fe      	b.n	8000688 <HardFault_Handler+0x4>

0800068a <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800068e:	e7fe      	b.n	800068e <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000694:	e7fe      	b.n	8000694 <BusFault_Handler+0x4>

08000696 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800069a:	e7fe      	b.n	800069a <UsageFault_Handler+0x4>

0800069c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DMA1_Channel6_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	/* USER CODE END DMA1_Channel6_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 80006e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80006ec:	f7ff ffb4 	bl	8000658 <LL_TIM_IsActiveFlag_UPDATE>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d005      	beq.n	8000702 <TIM2_IRQHandler+0x1e>
		PWM_Value += 1;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <TIM2_IRQHandler+0x2c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <TIM2_IRQHandler+0x2c>)
 8000700:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM2_IRQn 0 */
	/* USER CODE BEGIN TIM2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8000702:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000706:	f7ff ff99 	bl	800063c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000020 	.word	0x20000020

08000714 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
 */
void USART2_IRQHandler(void) {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

	/* USER CODE END USART2_IRQn 0 */
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <TIM6_DAC1_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <TIM6_DAC1_IRQHandler+0x20>)
 800072a:	f7ff ff95 	bl	8000658 <LL_TIM_IsActiveFlag_UPDATE>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <TIM6_DAC1_IRQHandler+0x16>
		PWM_Value = 0;
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <TIM6_DAC1_IRQHandler+0x24>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <TIM6_DAC1_IRQHandler+0x20>)
 800073c:	f7ff ff7e 	bl	800063c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40001000 	.word	0x40001000
 8000748:	20000020 	.word	0x20000020

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <__NVIC_EnableIRQ+0x38>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <LL_AHB1_GRP1_EnableClock>:
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800088e:	695a      	ldr	r2, [r3, #20]
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089a:	695a      	ldr	r2, [r3, #20]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40021000 	.word	0x40021000

080008b4 <LL_APB1_GRP1_EnableClock>:
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008be:	69da      	ldr	r2, [r3, #28]
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4013      	ands	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_TIM_EnableCounter>:
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f043 0201 	orr.w	r2, r3, #1
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_TIM_EnableARRPreload>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_TIM_DisableARRPreload>:
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_TIM_OC_DisableFast>:
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d028      	beq.n	80009a6 <LL_TIM_OC_DisableFast+0x62>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d023      	beq.n	80009a2 <LL_TIM_OC_DisableFast+0x5e>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d01e      	beq.n	800099e <LL_TIM_OC_DisableFast+0x5a>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	2b40      	cmp	r3, #64	; 0x40
 8000964:	d019      	beq.n	800099a <LL_TIM_OC_DisableFast+0x56>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800096c:	d013      	beq.n	8000996 <LL_TIM_OC_DisableFast+0x52>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000974:	d00d      	beq.n	8000992 <LL_TIM_OC_DisableFast+0x4e>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800097c:	d007      	beq.n	800098e <LL_TIM_OC_DisableFast+0x4a>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000984:	d101      	bne.n	800098a <LL_TIM_OC_DisableFast+0x46>
 8000986:	2307      	movs	r3, #7
 8000988:	e00e      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 800098a:	2308      	movs	r3, #8
 800098c:	e00c      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 800098e:	2306      	movs	r3, #6
 8000990:	e00a      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 8000992:	2305      	movs	r3, #5
 8000994:	e008      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 8000996:	2304      	movs	r3, #4
 8000998:	e006      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 800099a:	2303      	movs	r3, #3
 800099c:	e004      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x64>
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3318      	adds	r3, #24
 80009ae:	4619      	mov	r1, r3
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LL_TIM_OC_DisableFast+0x9c>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	440b      	add	r3, r1
 80009b8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_TIM_OC_DisableFast+0xa0>)
 80009c2:	5ccb      	ldrb	r3, [r1, r3]
 80009c4:	4619      	mov	r1, r3
 80009c6:	2304      	movs	r3, #4
 80009c8:	408b      	lsls	r3, r1
 80009ca:	43db      	mvns	r3, r3
 80009cc:	401a      	ands	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	08002318 	.word	0x08002318
 80009e4:	08002324 	.word	0x08002324

080009e8 <LL_TIM_OC_EnablePreload>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d028      	beq.n	8000a4a <LL_TIM_OC_EnablePreload+0x62>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d023      	beq.n	8000a46 <LL_TIM_OC_EnablePreload+0x5e>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b10      	cmp	r3, #16
 8000a02:	d01e      	beq.n	8000a42 <LL_TIM_OC_EnablePreload+0x5a>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b40      	cmp	r3, #64	; 0x40
 8000a08:	d019      	beq.n	8000a3e <LL_TIM_OC_EnablePreload+0x56>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d013      	beq.n	8000a3a <LL_TIM_OC_EnablePreload+0x52>
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a18:	d00d      	beq.n	8000a36 <LL_TIM_OC_EnablePreload+0x4e>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a20:	d007      	beq.n	8000a32 <LL_TIM_OC_EnablePreload+0x4a>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a28:	d101      	bne.n	8000a2e <LL_TIM_OC_EnablePreload+0x46>
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	e00e      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a2e:	2308      	movs	r3, #8
 8000a30:	e00c      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a32:	2306      	movs	r3, #6
 8000a34:	e00a      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e008      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <LL_TIM_OC_EnablePreload+0x64>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3318      	adds	r3, #24
 8000a52:	4619      	mov	r1, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LL_TIM_OC_EnablePreload+0x98>)
 8000a58:	5cd3      	ldrb	r3, [r2, r3]
 8000a5a:	440b      	add	r3, r1
 8000a5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <LL_TIM_OC_EnablePreload+0x9c>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	408b      	lsls	r3, r1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	08002318 	.word	0x08002318
 8000a84:	08002324 	.word	0x08002324

08000a88 <LL_TIM_SetClockSource>:
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000a9a:	f023 0307 	bic.w	r3, r3, #7
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_TIM_SetTriggerOutput>:
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	605a      	str	r2, [r3, #4]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_TIM_DisableMasterSlaveMode>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	609a      	str	r2, [r3, #8]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fbce 	bl	80022d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
 8000b4a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff feb1 	bl	80008b4 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b52:	f7ff fe0d 	bl	8000770 <__NVIC_GetPriorityGrouping>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fe5d 	bl	800081c <NVIC_EncodePriority>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4619      	mov	r1, r3
 8000b66:	201c      	movs	r0, #28
 8000b68:	f7ff fe2e 	bl	80007c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f7ff fe0d 	bl	800078c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000b72:	f240 331f 	movw	r3, #799	; 0x31f
 8000b76:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000b7c:	2363      	movs	r3, #99	; 0x63
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b8e:	f000 ff01 	bl	8001994 <LL_TIM_Init>
  //LL_TIM_DisableARRPreload(TIM2);
  LL_TIM_EnableARRPreload(TIM2);
 8000b92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b96:	f7ff feb5 	bl	8000904 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ba0:	f7ff ff72 	bl	8000a88 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000baa:	f7ff ff1d 	bl	80009e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000bae:	2360      	movs	r3, #96	; 0x60
 8000bb0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2101      	movs	r1, #1
 8000bca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bce:	f000 ff53 	bl	8001a78 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bd8:	f7ff feb4 	bl	8000944 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	461a      	mov	r2, r3
 8000be6:	2110      	movs	r1, #16
 8000be8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bec:	f000 ff44 	bl	8001a78 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf6:	f7ff fea5 	bl	8000944 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c00:	f7ff ff57 	bl	8000ab2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c08:	f7ff ff66 	bl	8000ad8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  //LL_TIM_EnableIT_UPDATE(TIM2);
  LL_TIM_EnableCounter(TIM2);
 8000c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c10:	f7ff fe68 	bl	80008e4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c18:	f7ff fe34 	bl	8000884 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c20:	2302      	movs	r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f000 fc02 	bl	8001444 <LL_GPIO_Init>

  LL_TIM_EnableIT_UPDATE(TIM2);
 8000c40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c44:	f7ff ff58 	bl	8000af8 <LL_TIM_EnableIT_UPDATE>
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000c64:	2010      	movs	r0, #16
 8000c66:	f7ff fe25 	bl	80008b4 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c6a:	f7ff fd81 	bl	8000770 <__NVIC_GetPriorityGrouping>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fdd1 	bl	800081c <NVIC_EncodePriority>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2036      	movs	r0, #54	; 0x36
 8000c80:	f7ff fda2 	bl	80007c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000c84:	2036      	movs	r0, #54	; 0x36
 8000c86:	f7ff fd81 	bl	800078c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8000c8a:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000c8e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8000c94:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000c98:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000ca0:	f000 fe78 	bl	8001994 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000ca6:	f7ff fe3d 	bl	8000924 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8000caa:	2100      	movs	r1, #0
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000cae:	f7ff ff00 	bl	8000ab2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000cb4:	f7ff ff10 	bl	8000ad8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM6);
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000cba:	f7ff ff1d 	bl	8000af8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8000cbe:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM6_Init+0x7c>)
 8000cc0:	f7ff fe10 	bl	80008e4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <__NVIC_GetPriorityGrouping>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LL_DMA_SetDataTransferDirection+0x48>)
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e04:	f023 0310 	bic.w	r3, r3, #16
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <LL_DMA_SetDataTransferDirection+0x48>)
 8000e0e:	5c8a      	ldrb	r2, [r1, r2]
 8000e10:	4611      	mov	r1, r2
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	440a      	add	r2, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	08002330 	.word	0x08002330

08000e30 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <LL_DMA_SetMode+0x44>)
 8000e42:	5cd3      	ldrb	r3, [r2, r3]
 8000e44:	461a      	mov	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f023 0220 	bic.w	r2, r3, #32
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <LL_DMA_SetMode+0x44>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	08002330 	.word	0x08002330

08000e78 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <LL_DMA_SetPeriphIncMode+0x44>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <LL_DMA_SetPeriphIncMode+0x44>)
 8000e9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	440b      	add	r3, r1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	08002330 	.word	0x08002330

08000ec0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ed2:	5cd3      	ldrb	r3, [r2, r3]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ee6:	5ccb      	ldrb	r3, [r1, r3]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	440b      	add	r3, r1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	08002330 	.word	0x08002330

08000f08 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <LL_DMA_SetPeriphSize+0x44>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <LL_DMA_SetPeriphSize+0x44>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	4619      	mov	r1, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	440b      	add	r3, r1
 8000f36:	4619      	mov	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	08002330 	.word	0x08002330

08000f50 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <LL_DMA_SetMemorySize+0x44>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	461a      	mov	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <LL_DMA_SetMemorySize+0x44>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	08002330 	.word	0x08002330

08000f98 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000faa:	5cd3      	ldrb	r3, [r2, r3]
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08002330 	.word	0x08002330

08000fe0 <LL_AHB1_GRP1_EnableClock>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000

08001010 <LL_APB1_GRP1_EnableClock>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <LL_APB1_GRP1_EnableClock+0x2c>)
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <LL_APB1_GRP1_EnableClock+0x2c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4013      	ands	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000

08001040 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3308      	adds	r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	e853 3f00 	ldrex	r3, [r3]
 80010a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3308      	adds	r3, #8
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	61ba      	str	r2, [r7, #24]
 80010b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010b4:	6979      	ldr	r1, [r7, #20]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	e841 2300 	strex	r3, r2, [r1]
 80010bc:	613b      	str	r3, [r7, #16]
   return(result);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e7      	bne.n	8001094 <LL_USART_DisableIT_CTS+0x8>
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80010fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001102:	f7ff ff85 	bl	8001010 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001106:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800110a:	f7ff ff69 	bl	8000fe0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800110e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001112:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001114:	2302      	movs	r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001124:	2307      	movs	r3, #7
 8001126:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 f988 	bl	8001444 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001134:	2200      	movs	r2, #0
 8001136:	2106      	movs	r1, #6
 8001138:	4829      	ldr	r0, [pc, #164]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 800113a:	f7ff fe53 	bl	8000de4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800113e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001142:	2106      	movs	r1, #6
 8001144:	4826      	ldr	r0, [pc, #152]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 8001146:	f7ff ff27 	bl	8000f98 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 800114a:	2220      	movs	r2, #32
 800114c:	2106      	movs	r1, #6
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 8001150:	f7ff fe6e 	bl	8000e30 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001154:	2200      	movs	r2, #0
 8001156:	2106      	movs	r1, #6
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 800115a:	f7ff fe8d 	bl	8000e78 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	2106      	movs	r1, #6
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 8001164:	f7ff feac 	bl	8000ec0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001168:	2200      	movs	r2, #0
 800116a:	2106      	movs	r1, #6
 800116c:	481c      	ldr	r0, [pc, #112]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 800116e:	f7ff fecb 	bl	8000f08 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001172:	2200      	movs	r2, #0
 8001174:	2106      	movs	r1, #6
 8001176:	481a      	ldr	r0, [pc, #104]	; (80011e0 <MX_USART2_UART_Init+0x10c>)
 8001178:	f7ff feea 	bl	8000f50 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800117c:	f7ff fda8 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8001180:	4603      	mov	r3, r0
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdf8 	bl	8000d7c <NVIC_EncodePriority>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	2026      	movs	r0, #38	; 0x26
 8001192:	f7ff fdc9 	bl	8000d28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001196:	2026      	movs	r0, #38	; 0x26
 8001198:	f7ff fda8 	bl	8000cec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800119c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011a0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011ae:	230c      	movs	r3, #12
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x110>)
 80011c2:	f000 ffc1 	bl	8002148 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_USART2_UART_Init+0x110>)
 80011c8:	f7ff ff60 	bl	800108c <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x110>)
 80011ce:	f7ff ff47 	bl	8001060 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_USART2_UART_Init+0x110>)
 80011d4:	f7ff ff34 	bl	8001040 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40004400 	.word	0x40004400

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff fa9b 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f001 f83b 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff f9bf 	bl	800059c <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001220:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800122c:	08002340 	.word	0x08002340
  ldr r2, =_sbss
 8001230:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001234:	20000024 	.word	0x20000024

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>

0800123a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800123a:	b480      	push	{r7}
 800123c:	b089      	sub	sp, #36	; 0x24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	613b      	str	r3, [r7, #16]
  return result;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2103      	movs	r1, #3
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	401a      	ands	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	61bb      	str	r3, [r7, #24]
  return result;
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	3724      	adds	r7, #36	; 0x24
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	401a      	ands	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	431a      	orrs	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	613b      	str	r3, [r7, #16]
  return result;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2103      	movs	r1, #3
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	fa93 f3a3 	rbit	r3, r3
 8001302:	61bb      	str	r3, [r7, #24]
  return result;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001326:	b480      	push	{r7}
 8001328:	b089      	sub	sp, #36	; 0x24
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	613b      	str	r3, [r7, #16]
  return result;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2103      	movs	r1, #3
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	401a      	ands	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	61bb      	str	r3, [r7, #24]
  return result;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	60da      	str	r2, [r3, #12]
}
 8001378:	bf00      	nop
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	613b      	str	r3, [r7, #16]
  return result;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	210f      	movs	r1, #15
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	61bb      	str	r3, [r7, #24]
  return result;
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	431a      	orrs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80013d6:	bf00      	nop
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b089      	sub	sp, #36	; 0x24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	613b      	str	r3, [r7, #16]
  return result;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	210f      	movs	r1, #15
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	61bb      	str	r3, [r7, #24]
  return result;
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001438:	bf00      	nop
 800143a:	3724      	adds	r7, #36	; 0x24
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	613b      	str	r3, [r7, #16]
  return result;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001466:	e051      	b.n	800150c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d043      	beq.n	8001506 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <LL_GPIO_Init+0x4a>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d10e      	bne.n	80014ac <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	461a      	mov	r2, r3
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff16 	bl	80012c8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	461a      	mov	r2, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fef6 	bl	8001298 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	461a      	mov	r2, r3
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff36 	bl	8001326 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d11a      	bne.n	80014f8 <LL_GPIO_Init+0xb4>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	60bb      	str	r3, [r7, #8]
  return result;
 80014ce:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	d807      	bhi.n	80014ea <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	461a      	mov	r2, r3
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff4e 	bl	8001384 <LL_GPIO_SetAFPin_0_7>
 80014e8:	e006      	b.n	80014f8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	461a      	mov	r2, r3
 80014f0:	69b9      	ldr	r1, [r7, #24]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff75 	bl	80013e2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	461a      	mov	r2, r3
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fe9a 	bl	800123a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1a6      	bne.n	8001468 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LL_RCC_HSI_IsReady>:
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <LL_RCC_HSI_IsReady+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000

08001548 <LL_RCC_LSE_IsReady>:
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <LL_RCC_LSE_IsReady+0x20>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b02      	cmp	r3, #2
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <LL_RCC_GetSysClkSource>:
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <LL_RCC_GetSysClkSource+0x18>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <LL_RCC_GetUSARTClockSource+0x28>)
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	2103      	movs	r1, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	401a      	ands	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	4313      	orrs	r3, r2
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000

08001608 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <LL_RCC_PLL_GetMainSource+0x18>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_RCC_PLL_GetPrediv+0x18>)
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	f003 030f 	and.w	r3, r3, #15
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001664:	f000 f864 	bl	8001730 <RCC_GetSystemClockFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f882 	bl	800177c <RCC_GetHCLKClockFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f890 	bl	80017a8 <RCC_GetPCLK1ClockFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f89c 	bl	80017d0 <RCC_GetPCLK2ClockFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60da      	str	r2, [r3, #12]
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12d      	bne.n	8001716 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff8e 	bl	80015dc <LL_RCC_GetUSARTClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d00a      	beq.n	80016dc <LL_RCC_GetUSARTClockFreq+0x34>
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d819      	bhi.n	80016fe <LL_RCC_GetUSARTClockFreq+0x56>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d002      	beq.n	80016d4 <LL_RCC_GetUSARTClockFreq+0x2c>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d00c      	beq.n	80016ec <LL_RCC_GetUSARTClockFreq+0x44>
 80016d2:	e014      	b.n	80016fe <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80016d4:	f000 f82c 	bl	8001730 <RCC_GetSystemClockFreq>
 80016d8:	60f8      	str	r0, [r7, #12]
        break;
 80016da:	e021      	b.n	8001720 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80016dc:	f7ff ff22 	bl	8001524 <LL_RCC_HSI_IsReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <LL_RCC_GetUSARTClockFreq+0x84>)
 80016e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016ea:	e016      	b.n	800171a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80016ec:	f7ff ff2c 	bl	8001548 <LL_RCC_LSE_IsReady>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d013      	beq.n	800171e <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80016f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016fc:	e00f      	b.n	800171e <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80016fe:	f000 f817 	bl	8001730 <RCC_GetSystemClockFreq>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f839 	bl	800177c <RCC_GetHCLKClockFreq>
 800170a:	4603      	mov	r3, r0
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f84b 	bl	80017a8 <RCC_GetPCLK1ClockFreq>
 8001712:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001714:	e004      	b.n	8001720 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001716:	bf00      	nop
 8001718:	e002      	b.n	8001720 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800171a:	bf00      	nop
 800171c:	e000      	b.n	8001720 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800171e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001720:	68fb      	ldr	r3, [r7, #12]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	007a1200 	.word	0x007a1200

08001730 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800173a:	f7ff ff17 	bl	800156c <LL_RCC_GetSysClkSource>
 800173e:	4603      	mov	r3, r0
 8001740:	2b08      	cmp	r3, #8
 8001742:	d00c      	beq.n	800175e <RCC_GetSystemClockFreq+0x2e>
 8001744:	2b08      	cmp	r3, #8
 8001746:	d80e      	bhi.n	8001766 <RCC_GetSystemClockFreq+0x36>
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <RCC_GetSystemClockFreq+0x22>
 800174c:	2b04      	cmp	r3, #4
 800174e:	d003      	beq.n	8001758 <RCC_GetSystemClockFreq+0x28>
 8001750:	e009      	b.n	8001766 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <RCC_GetSystemClockFreq+0x48>)
 8001754:	607b      	str	r3, [r7, #4]
      break;
 8001756:	e009      	b.n	800176c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <RCC_GetSystemClockFreq+0x48>)
 800175a:	607b      	str	r3, [r7, #4]
      break;
 800175c:	e006      	b.n	800176c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800175e:	f000 f84b 	bl	80017f8 <RCC_PLL_GetFreqDomain_SYS>
 8001762:	6078      	str	r0, [r7, #4]
      break;
 8001764:	e002      	b.n	800176c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <RCC_GetSystemClockFreq+0x48>)
 8001768:	607b      	str	r3, [r7, #4]
      break;
 800176a:	bf00      	nop
  }

  return frequency;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	007a1200 	.word	0x007a1200

0800177c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001784:	f7ff ff00 	bl	8001588 <LL_RCC_GetAHBPrescaler>
 8001788:	4603      	mov	r3, r0
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <RCC_GetHCLKClockFreq+0x28>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	40d3      	lsrs	r3, r2
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	08002300 	.word	0x08002300

080017a8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80017b0:	f7ff fef8 	bl	80015a4 <LL_RCC_GetAPB1Prescaler>
 80017b4:	4603      	mov	r3, r0
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <RCC_GetPCLK1ClockFreq+0x24>)
 80017ba:	5cd3      	ldrb	r3, [r2, r3]
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	40d3      	lsrs	r3, r2
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08002310 	.word	0x08002310

080017d0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80017d8:	f7ff fef2 	bl	80015c0 <LL_RCC_GetAPB2Prescaler>
 80017dc:	4603      	mov	r3, r0
 80017de:	0adb      	lsrs	r3, r3, #11
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <RCC_GetPCLK2ClockFreq+0x24>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	40d3      	lsrs	r3, r2
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08002310 	.word	0x08002310

080017f8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001806:	f7ff feff 	bl	8001608 <LL_RCC_PLL_GetMainSource>
 800180a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d003      	beq.n	8001822 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800181a:	e005      	b.n	8001828 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800181e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001820:	e005      	b.n	800182e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001824:	60fb      	str	r3, [r7, #12]
      break;
 8001826:	e002      	b.n	800182e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800182a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800182c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800182e:	f7ff ff07 	bl	8001640 <LL_RCC_PLL_GetPrediv>
 8001832:	4603      	mov	r3, r0
 8001834:	3301      	adds	r3, #1
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	fbb2 f4f3 	udiv	r4, r2, r3
 800183c:	f7ff fef2 	bl	8001624 <LL_RCC_PLL_GetMultiplicator>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001846:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800184a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	fa92 f2a2 	rbit	r2, r2
 8001852:	603a      	str	r2, [r7, #0]
  return result;
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	40d3      	lsrs	r3, r2
 800185e:	3302      	adds	r3, #2
 8001860:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	003d0900 	.word	0x003d0900
 8001870:	007a1200 	.word	0x007a1200

08001874 <LL_TIM_SetPrescaler>:
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_TIM_SetAutoReload>:
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_TIM_SetRepetitionCounter>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_TIM_OC_SetCompareCH1>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_TIM_OC_SetCompareCH2>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_TIM_OC_SetCompareCH3>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_TIM_OC_SetCompareCH4>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_TIM_OC_SetCompareCH5>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_TIM_OC_SetCompareCH6>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	615a      	str	r2, [r3, #20]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <LL_TIM_Init+0xd0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <LL_TIM_Init+0x28>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b2:	d003      	beq.n	80019bc <LL_TIM_Init+0x28>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <LL_TIM_Init+0xd4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d106      	bne.n	80019ca <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <LL_TIM_Init+0xd0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <LL_TIM_Init+0x66>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d8:	d00f      	beq.n	80019fa <LL_TIM_Init+0x66>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <LL_TIM_Init+0xd4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00b      	beq.n	80019fa <LL_TIM_Init+0x66>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <LL_TIM_Init+0xd8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <LL_TIM_Init+0x66>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <LL_TIM_Init+0xdc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d003      	beq.n	80019fa <LL_TIM_Init+0x66>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <LL_TIM_Init+0xe0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d106      	bne.n	8001a08 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff3b 	bl	8001890 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff27 	bl	8001874 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LL_TIM_Init+0xd0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00b      	beq.n	8001a46 <LL_TIM_Init+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <LL_TIM_Init+0xd8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <LL_TIM_Init+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <LL_TIM_Init+0xdc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d003      	beq.n	8001a46 <LL_TIM_Init+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <LL_TIM_Init+0xe0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff2d 	bl	80018ac <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff8e 	bl	8001974 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40014000 	.word	0x40014000
 8001a70:	40014400 	.word	0x40014400
 8001a74:	40014800 	.word	0x40014800

08001a78 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a8e:	d045      	beq.n	8001b1c <LL_TIM_OC_Init+0xa4>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a96:	d848      	bhi.n	8001b2a <LL_TIM_OC_Init+0xb2>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d036      	beq.n	8001b0e <LL_TIM_OC_Init+0x96>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d840      	bhi.n	8001b2a <LL_TIM_OC_Init+0xb2>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aae:	d027      	beq.n	8001b00 <LL_TIM_OC_Init+0x88>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab6:	d838      	bhi.n	8001b2a <LL_TIM_OC_Init+0xb2>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abe:	d018      	beq.n	8001af2 <LL_TIM_OC_Init+0x7a>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac6:	d830      	bhi.n	8001b2a <LL_TIM_OC_Init+0xb2>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d003      	beq.n	8001ad6 <LL_TIM_OC_Init+0x5e>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d007      	beq.n	8001ae4 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001ad4:	e029      	b.n	8001b2a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f82d 	bl	8001b38 <OC1Config>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ae2:	e023      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f8a0 	bl	8001c2c <OC2Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
      break;
 8001af0:	e01c      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f917 	bl	8001d28 <OC3Config>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
      break;
 8001afe:	e015      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f98e 	bl	8001e24 <OC4Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b0c:	e00e      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f9ed 	bl	8001ef0 <OC5Config>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]
      break;
 8001b1a:	e007      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa44 	bl	8001fac <OC6Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]
      break;
 8001b28:	e000      	b.n	8001b2c <LL_TIM_OC_Init+0xb4>
      break;
 8001b2a:	bf00      	nop
  }

  return result;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	f023 0201 	bic.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f023 0202 	bic.w	r2, r3, #2
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f023 0201 	bic.w	r2, r3, #1
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a20      	ldr	r2, [pc, #128]	; (8001c1c <OC1Config+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00b      	beq.n	8001bb6 <OC1Config+0x7e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <OC1Config+0xe8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <OC1Config+0x7e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <OC1Config+0xec>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <OC1Config+0x7e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <OC1Config+0xf0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d11e      	bne.n	8001bf4 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f023 0208 	bic.w	r2, r3, #8
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f023 0204 	bic.w	r2, r3, #4
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fe5e 	bl	80018c8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40014000 	.word	0x40014000
 8001c24:	40014400 	.word	0x40014400
 8001c28:	40014800 	.word	0x40014800

08001c2c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	f023 0210 	bic.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	0212      	lsls	r2, r2, #8
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f023 0220 	bic.w	r2, r3, #32
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0210 	bic.w	r2, r3, #16
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <OC2Config+0xec>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00b      	beq.n	8001cb0 <OC2Config+0x84>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <OC2Config+0xf0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <OC2Config+0x84>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <OC2Config+0xf4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <OC2Config+0x84>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <OC2Config+0xf8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d11f      	bne.n	8001cf0 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fdee 	bl	80018e4 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40014000 	.word	0x40014000
 8001d20:	40014400 	.word	0x40014400
 8001d24:	40014800 	.word	0x40014800

08001d28 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <OC3Config+0xec>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00b      	beq.n	8001daa <OC3Config+0x82>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <OC3Config+0xf0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <OC3Config+0x82>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <OC3Config+0xf4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <OC3Config+0x82>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <OC3Config+0xf8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11f      	bne.n	8001dea <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	029b      	lsls	r3, r3, #10
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fd7f 	bl	8001900 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40014000 	.word	0x40014000
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40014800 	.word	0x40014800

08001e24 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	0212      	lsls	r2, r2, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	031b      	lsls	r3, r3, #12
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <OC4Config+0xbc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <OC4Config+0x84>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <OC4Config+0xc0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <OC4Config+0x84>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <OC4Config+0xc4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <OC4Config+0x84>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <OC4Config+0xc8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d107      	bne.n	8001eb8 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	019b      	lsls	r3, r3, #6
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fd26 	bl	800191c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40014000 	.word	0x40014000
 8001ee8:	40014400 	.word	0x40014400
 8001eec:	40014800 	.word	0x40014800

08001ef0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <OC5Config+0xac>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <OC5Config+0x74>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <OC5Config+0xb0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <OC5Config+0x74>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <OC5Config+0xb4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <OC5Config+0x74>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <OC5Config+0xb8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d109      	bne.n	8001f78 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fcd7 	bl	8001938 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800

08001fac <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	0212      	lsls	r2, r2, #8
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <OC6Config+0xac>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <OC6Config+0x76>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <OC6Config+0xb0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <OC6Config+0x76>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <OC6Config+0xb4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <OC6Config+0x76>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <OC6Config+0xb8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d109      	bne.n	8002036 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fc88 	bl	8001958 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800

08002068 <LL_USART_IsEnabled>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <LL_USART_IsEnabled+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_USART_IsEnabled+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_USART_SetStopBitsLength>:
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	605a      	str	r2, [r3, #4]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_USART_SetHWFlowCtrl>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_USART_SetBaudRate>:
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ee:	d11a      	bne.n	8002126 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	005a      	lsls	r2, r3, #1
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	441a      	add	r2, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	b29b      	uxth	r3, r3
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	60da      	str	r2, [r3, #12]
}
 8002124:	e00a      	b.n	800213c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	085a      	lsrs	r2, r3, #1
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	441a      	add	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	60da      	str	r2, [r3, #12]
}
 800213c:	bf00      	nop
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff84 	bl	8002068 <LL_USART_IsEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d14e      	bne.n	8002204 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <LL_USART_Init+0xc8>)
 800216c:	4013      	ands	r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	6851      	ldr	r1, [r2, #4]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	68d2      	ldr	r2, [r2, #12]
 8002176:	4311      	orrs	r1, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6912      	ldr	r2, [r2, #16]
 800217c:	4311      	orrs	r1, r2
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	6992      	ldr	r2, [r2, #24]
 8002182:	430a      	orrs	r2, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff7c 	bl	800208e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff89 	bl	80020b4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <LL_USART_Init+0xcc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d104      	bne.n	80021b4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fa7c 	bl	80016a8 <LL_RCC_GetUSARTClockFreq>
 80021b0:	61b8      	str	r0, [r7, #24]
 80021b2:	e016      	b.n	80021e2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <LL_USART_Init+0xd0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d107      	bne.n	80021cc <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fa4b 	bl	800165c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	e00a      	b.n	80021e2 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <LL_USART_Init+0xd4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d106      	bne.n	80021e2 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fa3f 	bl	800165c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00d      	beq.n	8002204 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80021f0:	2300      	movs	r3, #0
 80021f2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff6b 	bl	80020da <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002204:	7ffb      	ldrb	r3, [r7, #31]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	efff69f3 	.word	0xefff69f3
 8002214:	40013800 	.word	0x40013800
 8002218:	40004400 	.word	0x40004400
 800221c:	40004800 	.word	0x40004800

08002220 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <LL_InitTick+0x30>)
 8002234:	3b01      	subs	r3, #1
 8002236:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <LL_InitTick+0x30>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <LL_InitTick+0x30>)
 8002240:	2205      	movs	r2, #5
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e010 	.word	0xe000e010

08002254 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800225c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffdd 	bl	8002220 <LL_InitTick>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <LL_SetSystemCoreClock+0x1c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4d0d      	ldr	r5, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2600      	movs	r6, #0
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4d0b      	ldr	r5, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 f820 	bl	80022e8 <_init>
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2600      	movs	r6, #0
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08002338 	.word	0x08002338
 80022cc:	08002338 	.word	0x08002338
 80022d0:	08002338 	.word	0x08002338
 80022d4:	0800233c 	.word	0x0800233c

080022d8 <memset>:
 80022d8:	4402      	add	r2, r0
 80022da:	4603      	mov	r3, r0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d100      	bne.n	80022e2 <memset+0xa>
 80022e0:	4770      	bx	lr
 80022e2:	f803 1b01 	strb.w	r1, [r3], #1
 80022e6:	e7f9      	b.n	80022dc <memset+0x4>

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
